<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java反射与注解</title>
      <link href="/posts/2009398734/"/>
      <url>/posts/2009398734/</url>
      
        <content type="html"><![CDATA[<h1 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h1><h2 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>不是程序本身，可对程序作出解释</li><li><strong>可以被其他程序（比如编译器）读取</strong></li><li>以“@注释名”在代码中存在的，还可以添加一些参数值</li><li>附加在package，class，method，field等上面，相当给他们添加额外的辅助信息，<strong>通过反射机制编程实现对元数据的访问</strong></li></ul><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul><li>@override ：只适用于修饰方法，表示一个方法声明打算<strong>重写超类</strong>的另一个方法声明</li><li>@Deprecated：可以用于修辞方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择（已被淘汰）</li><li>@SuppressWarnings：需要添加一个参数才能正确使用，这些参数已经定义好，选择性使用</li></ul><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>作用：负责注解其他注解，java定义了4个标准的meta-annotation类型，分别是：</p><ul><li><p>@Target ：描述使用范围 </p></li><li><p>@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期 （SOURCE&lt;CLASS&lt;RUNTIME）</p></li><li><p>@Document 说明该注解将被包含在javadoc中</p></li><li><p>@Inherited   说明子类可以继承父类中的该注解</p><p>被用来提供对其他annotation类型作说明  </p></li></ul><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>使用@interface 自定义注解时，自动继承java.lang.annotation.Annotation接口</p><ul><li>@interface 用来声明一个注解</li><li><strong>其中的每个方法实际上是声明了一个配置参数</strong></li><li>方法名称就是参数名称</li><li>返回值类型就是参数的类型（<strong>返回值只能是基本类型，Class，String，enum</strong>）</li><li>可通过default声明参数的默认值</li><li>如果只有一个参数，一般参数名为value</li><li><strong>注解元素必须要有值</strong>，自定义注解时经常使用空字符串，0作为默认值</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注解可显示赋值，如果没有默认值，必须给注解赋值，否则会报错</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>@<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注解的参数：参数类型+参数名()</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认值-1 ，代表不存在</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">hobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">"篮球"</span><span class="token punctuation">,</span><span class="token string">"足球"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><ul><li>一类在运行时可以改变其结构的语言，例如新的函数，对象甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化</li><li>主要的动态语言：C# ，JavaScript，PHP，Python，Object-C等</li></ul><h3 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h3><ul><li>运行时不可改变其结构的语言 ，如java，C，C++</li><li>Java可称为<strong>“准动态语言”</strong>，Java有一定的动态性，<strong>利用反射机制获得类似动态语言的特性</strong></li></ul><h3 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h3><ul><li><p>Reflection 是Java 被视为动态语言的关键，反射机制<strong>允许程序在执行期间</strong>借助Reflection API <strong>获取任何类的内部信息</strong>，并<strong>能直接操作任意对象的内部属性及方法</strong></p><pre class=" language-java"><code class="language-java"> Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span></code></pre></li><li><p>加载完类后，在<strong>堆内存的方法区中产生了一个Class类型对象</strong>（一个类只有一个Class对象），这个对象包含了<strong>完整的类的结构信息</strong>，通过这个对象看到类的结构</p><p>正常方式：</p><pre class="mermaid">  graph LRA(引入需要的包类名称)-->B(通过new实例化)B -->C(取得实例化对象)</pre><p>反射机制：</p><pre class="mermaid">  graph LR A(实例化对象)--> B(getClass方法) B -->C(得到完整的包类名称)</pre></li></ul><p>反射机制提供的功能：</p><ul><li>在运行时判断任意一个对象的所属类</li><li>在运行时构造一个类的对象</li><li>在运行时判断一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li><strong>在运行时执行注解</strong></li><li>生成动态代理</li><li>….</li></ul><p>优点：实现动态创建对象和编译，灵活性高</p><p>缺点：对性能有影响，使用反射基本上是一种<strong>解释操作</strong>，这类操作<strong>总是慢于 直接执行相同的操作</strong></p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        Class <span class="token class-name">c1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出的哈希值一样，说明一个类在内存中只有一个class对象‘</span>        <span class="token comment" spellcheck="true">//一个类被加载后，类的整体结构都会被封装在Class对象中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：class com.reflection.Student  通过对象反射求出类的名称</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 实体类Student */</span><span class="token keyword">class</span>  <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a><strong>Class类</strong></h4><p> 在Object类中定义了getClass()方法，此方法将被所有的子类继承</p><p>  <code>public final Class getClass（）</code>该方法的返回值的类型是一个Class类，该类是Java反射的源头，即可通过对象反射求出类的名称</p><p>对于每一个类而言，<strong>JRE 都为其保留一个不变的Class 类型的对象</strong></p><ul><li>Class 本身是一个类</li><li><strong>Class对象只能有系统创建</strong></li><li>一个加载的类<strong>在  JVM 中只会有一个Class实例</strong></li><li>一个Class 对象对应的是<strong>一个加载到 JVM 中的一个 .class 文件</strong></li><li>每个类的实例都记得自己是由哪个Class实例生成</li><li>通过Class 可以完整得到一个类中的所有被加载的结构</li><li><strong>Reflection的根源是 Class 类，针对任何你想 动态加载，运行的类，唯有先获得相应Class对象</strong> </li></ul><p>常用方法</p><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static ClassForName(String name )</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回Class对象的实例</td></tr><tr><td>getName()</td><td>返回Class对象所表示的实体（类，接口，数组，枚举或void ）的名称</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的分类的Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class 对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor 对象的数组</td></tr><tr><td>Method getMethod( String name, Class … T)</td><td>返回一个Method 对象，此对象的形参类型为 paramType</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回Field 对象的数组</td></tr></tbody></table><p>获取Class的实例</p><ul><li><p>已知具体的类，通过类的class属性获取，该方法最安全可靠，程序性能最高</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">class</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre></li><li><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">class</span> <span class="token operator">=</span> penson<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">class</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"类的全路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>内置基本数据类型可直接用  类名.Type</p></li><li><p>利用 ClassLoader</p></li></ul><p>哪些类型可以有Class对象：</p><ul><li>class ：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举</li><li>annotation：注解 @interface</li><li>primitive ：基本数据类型</li><li>void</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class <span class="token class-name">c1</span> <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>         Class <span class="token class-name">c2</span> <span class="token operator">=</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c3</span> <span class="token operator">=</span> ElementType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c4</span> <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c5</span> <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c6</span> <span class="token operator">=</span> Override<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Class <span class="token class-name">c7</span> <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span><span class="token keyword">class</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object</span><span class="token keyword">class</span> <span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType</span><span class="token keyword">class</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>I<span class="token keyword">void</span><span class="token keyword">interface</span> <span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Override</span><span class="token keyword">interface</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List</span></code></pre><h4 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h4><pre class="mermaid">graph LRA(Java 内存)--> B(堆 不连续的空间存放new出的对象或者说是类的实例)A -->C(栈 连续的存储空间 遵循后进先出原则 存放局部变量)A -->D(方法区 方法区在堆空间内 用于存放1:类的代码信息2:静态变量和方法3:常量池 具有共享机制)B -->E(存放new的对象和数组)B -->F(可以被所有的线程共享 不会存放别的对象引用)C -->G(存放基本变量类型 会包含这个基本类型的具体数值)C -->H(引用对象的变量 会存放这个引用在堆里面的具体地址)D -->I(可以被所有的线程共享)D -->J(包含了所有的class和static变量)</pre><h4 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h4><p> 程序主动使用某个类时，若该类未被初始化，则系统会通过三个步骤对该类进行初始化</p><pre class="mermaid">graph TBA(类的加载Load 将类的.class文件读入内存 并创建一个Class对象 有类的加载器完成)-->BB(类的链接 Link 将类的二进制数据合并JRE中)--> C(类的初始化 Initialize JVM负责对类进行初始化)</pre><ul><li><p>加载：将类的.class文件读入内存中，并将<strong>静态数据</strong> 转换成方法区的运行时的数据结构，然后生成一个代表这个类的java.lang.Class对象</p></li><li><p>链接 ：将类的二进制代码合并JVM的运行状态之中</p><ul><li>验证：确保加载的类信息符合JVM规范，没有安全问题</li><li>准备：正式<strong>为类静态变量 分配内存并设置类变量默认初始值的阶段</strong>，这些内存都将<strong>在方法区中</strong>进行分配</li><li>解析：虚拟机常量池内的<strong>符号引用（常量名） 替换 直接引用（地址）</strong>的过程</li></ul></li><li><p>初始化：</p><ul><li>执行类构造器<clinit>()方法的过程，类构造器<clinit>()方法是由<strong>编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的</strong>。（<strong>类构造器时构造类信息，而不是对象</strong>）</clinit></clinit></li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</li><li><strong>虚拟机 会保证一个类的<client>()方法在多线程环境中被正确加锁和同步</client></strong></li></ul></li></ul><p>以下代码结合Debug 和 类加载过程 了解该程序运行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法输出"</span><span class="token operator">+</span>A<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> m <span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类无参构造"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果：</span>A类静态代码块A类无参构造main方法输出<span class="token number">300</span></code></pre><h4 id="类发生初始化的时机"><a href="#类发生初始化的时机" class="headerlink" title="类发生初始化的时机"></a>类发生初始化的时机</h4><ul><li>类的主动引用 （一定会发生类的初始化）<ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量） 和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先初始化它的父类</li></ul></li><li>类的被动引用 （不会发生类的初始化）<ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化 ； 例如：<strong>通过子类引用父类的静态变量，不会导致子类初始化</strong></li><li>通过数组定义类引用，不会触发此类的初始化</li><li><strong>引用常量不会触发此类的初始化</strong>（常量在链接阶段就存入调用类的常量池中）</li></ul></li></ul><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><ul><li><p>作用： 将class文件字节码内容<strong>加载到内存中</strong>，并<strong>将静态数据转换成方法区的运行时数据结构</strong>，然后<strong>在堆中生成</strong>一个代表这个类的<strong>java.lang.Class对象</strong>，作为方法区中类数据的访问入口。(把类装进内存)</p></li><li><p>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间，JVM垃回收机制可回收这些Class对象。</p></li></ul><pre class="mermaid">graph LRA(源程序 .java文件)-->B(Java编译器)B-->C(字节码 .class文件)C-->D(类加载器)D-->E(字节码校验器)E-->F(解释器)F-->G(操作系统平台)</pre><p>JVM定义了三种类型的类加载器</p><table><thead><tr><th>加载器名称</th><th>作用</th></tr></thead><tbody><tr><td>启动（引导）类加载器（Bootstrap ClassLoader）</td><td>用c++编写，是<strong>JVM自带的类加载器</strong>，<strong>负责Java平台核心库</strong>（rt.jar），用来装载核心类库。<strong>该加载器无法直接获取</strong></td></tr><tr><td>扩展类加载器（Extension ClassLoader）</td><td>负责jre/lib/ext目录下的jar包或-D java.ext.dirs 指定目录下的jar包装入工作库</td></tr><tr><td>系统类加载器（System ClassLoader）(App ClassLoader)</td><td>负责java -classpath 或 -D java.lang.path所指的目录下的类与jar包装入工作，是<strong>最常用的加载器</strong></td></tr></tbody></table><p>自底（左）向上（右）检查类是否已装载   自顶（右）向下（左）尝试加载类</p><pre class="mermaid">graph LRA(自定义类加载器) -->B(System ClassLoader)B-->C(Extension ClassLoader)C-->D(Bootstap ClassLoader)</pre><p>获取系统类加载器可以加载的路径：</p><p>System.getProperty(“java.class.path”);</p><h5 id="双亲委派机制："><a href="#双亲委派机制：" class="headerlink" title="双亲委派机制："></a>双亲委派机制：</h5><p>  当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p><p>  java.lang.ClassLoader 源码：  loadClass方法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException    <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                    <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                    <span class="token comment" spellcheck="true">// to find the class.</span>                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>双亲委派机制流程图</p><p><img src="/posts/2009398734/ClassLoader.PNG" alt="ClassLoader.PNG"></p><h5 id="双亲委派机制的作用"><a href="#双亲委派机制的作用" class="headerlink" title="双亲委派机制的作用"></a>双亲委派机制的作用</h5><p>1、防止重复加载同一个<code>.class</code>。通过委托去向上查找，加载过了，就不用再加载一遍。保证数据安全。<br> 2、保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.clas</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。<strong>不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象</strong>。这样<strong>保证了<code>Class</code>执行安全</strong>。</p><h4 id="获取类运行时类的完整结构"><a href="#获取类运行时类的完整结构" class="headerlink" title="获取类运行时类的完整结构"></a>获取类运行时类的完整结构</h4><pre class=" language-java"><code class="language-java">  Class <span class="token class-name">c1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取类的属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getFields() 只能找到public属性</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// getDeclaredFields()  获得全部的属性</span>        fields <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获得类的方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得本类及父类的public方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getMethods"</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获得本类的所有方法</span>        methods <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getDeclaredMethods"</span><span class="token operator">+</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h4 id="通过反射动态创建对象"><a href="#通过反射动态创建对象" class="headerlink" title="通过反射动态创建对象"></a>通过反射动态创建对象</h4><p>  创建类的对象：调用Class对象的newInstance()方法（需要无参构造器）</p><p>​        没有无参构造器时采用 明确调用类中的构造器，并将参数传递进去，才可以进行实例化操作</p><pre class=" language-java"><code class="language-java">  Class <span class="token class-name">c1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//无参构造</span>        Student student <span class="token operator">=</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span>c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射调用普通方法</span>        Method setName <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        setName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过反射调用setName方法"</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有参构造</span>        Constructor constructor <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//通过反射操作属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student2 <span class="token operator">=</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//仅仅使用getDeclaredField()方法是不可行的，由于id属性为private 解决：设置setAccessible属性为true</span>        Field id <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不能直接操作私有属性，需要关闭安全检测 方法或属性.setAccessible(true)</span>        id<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        id<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token number">001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student2的ID："</span><span class="token operator">+</span> student2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>setAccessible 属性</p><ul><li>Method，Field,Constructor对象都有setAccessible()属性</li><li>setAccessible属性的作用：启动和禁用访问安全检查的开关</li><li><strong>参数值为true，则指示反射的对象在使用时取消Java语言访问检测</strong><ul><li>提高反射的效率</li><li>使得原本无法访问的私有成员也可以访问</li></ul></li><li>参数值为false ，则指示反射的对象应该实施Java语言访问检测</li></ul><h4 id="性能对比分析"><a href="#性能对比分析" class="headerlink" title="性能对比分析"></a>性能对比分析</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author:Fan * @Description:分析性能问题 * @Date:Create in 10:37 2020/5/9 * @Modify By: **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test06</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//普通方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通调用方法执行1000000000的时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//反射方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method getName <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            getName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射方法执行1000000000的时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//反射方法调用 关闭检测方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反射方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method getName <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        getName<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            getName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射方法调用关闭检测方法执行1000000000的时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-tex"><code class="language-tex">============================普通调用方法执行1000000000的时间:6ms============================反射方法执行1000000000的时间:3764ms============================反射方法调用关闭检测方法执行1000000000的时间:2056ms</code></pre><p>结果：普通方法调用 比 反射调用的速度快很多，普通方法调用的性能较高；在大量的反射情况下，关闭安全检测的性能高。</p><h4 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h4><ul><li>java<strong>采用泛型擦除机制</strong>引入泛型，泛型<strong>仅仅是给编译器javac使用</strong>，确保数据的安全性和免去强制类型转换问题，但是<strong>一旦编译完成，所有和泛型有关的类型全部擦除</strong></li><li>通过反射操作这些类型，Java新增ParameterizedType，GenericArrayType，TypeVariable和WildcardType几种类型来代表不能归一到Class类中的类型，但是又和原始类型器齐名的类型</li></ul><table><thead><tr><th>类型</th><th>表示</th></tr></thead><tbody><tr><td>ParameterizedType</td><td>一种参数化类型，比如Collection<String></String></td></tr><tr><td>GenericArrayType</td><td>一种元素类型是参数化类型或者类型变量的数组类型</td></tr><tr><td>TypeVariable</td><td>是各种类型变量的公共父接口</td></tr><tr><td>WildcardType</td><td>一种通配符类型表达式</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author:Fan * @Description:获取泛型信息 * @Date:Create in 11:53 2020/5/9 * @Modify By: **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span>Student<span class="token operator">></span> map<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Student<span class="token operator">></span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>        Method method <span class="token operator">=</span> Test07<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> Map<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type<span class="token punctuation">[</span><span class="token punctuation">]</span> genericParameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getGenericParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Type genericParameterType <span class="token operator">:</span> genericParameterTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>genericParameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>genericParameterType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> genericParameterType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Type actualTypeArgument <span class="token operator">:</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actualTypeArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Method method1 <span class="token operator">=</span> Test07<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Type genericReturnType <span class="token operator">=</span> method1<span class="token punctuation">.</span><span class="token function">getGenericReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>genericReturnType <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Type<span class="token punctuation">[</span><span class="token punctuation">]</span> actualTypeArguments <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ParameterizedType<span class="token punctuation">)</span> genericReturnType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Type actualTypeArgument <span class="token operator">:</span> actualTypeArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test2:"</span><span class="token operator">+</span>actualTypeArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h4><h5 id="ORM-Object-Relational-Mapper"><a href="#ORM-Object-Relational-Mapper" class="headerlink" title="ORM(Object Relational Mapper)"></a>ORM(Object Relational Mapper)</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author:Fan * @Description: 反射操作注解 ORM * @Date:Create in 15:49 2020/5/9 * @Modify By: **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test08</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.reflection.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过反射获取注解</span>        Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Annotation annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获得注解的value值</span>        Table_User table_user <span class="token operator">=</span><span class="token punctuation">(</span>Table_User<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Table_User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>table_user<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得类指定的注解</span>        Field field <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field_User annotation <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Field_User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Table_User</span><span class="token punctuation">(</span><span class="token string">"db_User"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Field_User</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"db_id"</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">"int"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field_User</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"db_name"</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">"varchar"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Field_User</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"db_pass"</span><span class="token punctuation">,</span>type<span class="token operator">=</span><span class="token string">"varchar"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String pass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPass</span><span class="token punctuation">(</span>String pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pass <span class="token operator">=</span> pass<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>    @<span class="token keyword">interface</span> <span class="token class-name">Table_User</span><span class="token punctuation">{</span>        String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>    @<span class="token keyword">interface</span> <span class="token class-name">Field_User</span><span class="token punctuation">{</span>        String <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/posts/3661501281/"/>
      <url>/posts/3661501281/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，支持定制化 SQL、存储过程以及高级映射， 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集，可以使用<strong>简单的 XML</strong> 或<strong>注解</strong>来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>持久层：</p><p>数据持久化就是将程序的数据在持久状态和瞬时状态转化的过程</p><h2 id="mysql的引擎："><a href="#mysql的引擎：" class="headerlink" title="mysql的引擎："></a>mysql的引擎：</h2><ol><li><p>INNODB：</p><p>MySQL的默认存储引擎,传统的<a href="https://baike.baidu.com/item/ISAM" target="_blank" rel="noopener">ISAM</a>*与<a href="https://baike.baidu.com/item/MyISAM" target="_blank" rel="noopener">MyISAM</a>相比，InnoDB的最大特色就是支持了<a href="https://baike.baidu.com/item/ACID/10738" target="_blank" rel="noopener">ACID</a>兼容的<a href="https://baike.baidu.com/item/事务/5945882" target="_blank" rel="noopener">事务</a>（Transaction）功能</p><ul><li>事务型数据库的首选引擎，<strong>支持ACID事务</strong>，支持行级锁定</li><li>InnoDB是为<strong>处理巨大数据量时的最大性能</strong>设计</li><li>提供了具有<strong>事务</strong>、<strong>回滚</strong>(rollback)和<strong>崩溃修复能力</strong>(crash recovery capabilities)、<strong>多版本并发控制</strong>(multi-versioned concurrency control)的<strong>事务安全</strong>(transaction-safe (ACID compliant))型表</li><li>InnoDB <strong>在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</strong></li></ul></li><li><p>MyISAM：</p><p><strong>不支持事务</strong>、也<strong>不支持外键</strong>，优势是访问速度快，对事务完整性没有要求或者以select，insert为主的应用基本上可以用这个引擎来创建表</p><p>支持<strong>3种不同的存储格式</strong>，分别是：静态表；动态表；压缩表</p><p><strong>静态表</strong>：表中的字段都是非变长字段，这样每个记录都是固定长度的，优点存储非常迅速，容易缓存，出现故障容易恢复；缺点是占用的空间通常比动态表多（因为存储时会按照列的宽度定义补足空格）ps：在取数据的时候，默认会把字段后面的空格去掉，如果不注意会把数据本身带的空格也会忽略。</p><p><strong>动态表</strong>：记录不是固定长度的，这样存储的优点是占用的空间相对较少；缺点：频繁的更新、删除数据容易产生碎片，需要定期执行OPTIMIZE TABLE或者myisamchk-r命令来改善性能</p><p><strong>压缩表</strong>：因为每个记录是被单独压缩的，所以只有非常小的访问开支</p></li><li><p>MEMORY：</p><p>使用<strong>存在于内存中的内容</strong>来创建表,每个memory表只实际对应一个磁盘文件，格式是<strong>.frm</strong></p><ul><li><p>memory类型的<strong>表访问非常的快</strong>，因为它的数据是放在内存中的，并且<strong>默认使用HASH索引</strong>，但是<strong>一旦服务关闭，表中的数据就会丢失掉</strong>。<br>MEMORY存储引擎的表可以选择使用<strong>BTREE索引</strong>或者<strong>HASH索引</strong>，两种不同类型的索引有其不同的使用范围</p></li><li><p>Hash索引优点：<br>Hash 索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 <strong>Hash 索引的查询效率要远高于 B-Tree 索引。</strong><br>Hash索引缺点：hash算法是基于等值计算的，<strong>对于“like”等范围查找hash索引无效，不支持；</strong></p></li><li><p>Memory类型的存储引擎主要用于<strong>那些内容变化不频繁的代码表</strong>，或者<strong>作为统计操作的中间结果表</strong>，便于高效地对中间结果进行分析并得到最终的统计结果。</p></li><li><p>对存储引擎为memory的表<strong>进行更新操作要谨慎</strong>，因为<strong>数据并没有实际写入到磁盘中</strong>，需要考虑重新欺负服务后如何获取修改后的结果</p></li></ul></li><li><p>MERGE：<strong>一组MyISAM表的组合</strong></p></li></ol><h2 id="第一个Mybatis程序："><a href="#第一个Mybatis程序：" class="headerlink" title="第一个Mybatis程序："></a>第一个Mybatis程序：</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>​    先创建数据库：</p><pre class=" language-java"><code class="language-java">use mybatis<span class="token punctuation">;</span>CREATE TABLE <span class="token function">student</span><span class="token punctuation">(</span> id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> not null primary key<span class="token punctuation">,</span> name <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> null<span class="token punctuation">,</span> password <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span> null<span class="token punctuation">)</span>ENGINE<span class="token operator">=</span>INNODB <span class="token keyword">default</span> charset<span class="token operator">=</span>utf8<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置引擎为INNODB charset = utf8 不可写成utf-8</span>insert into <span class="token function">student</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'654321'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">,</span><span class="token string">'123456'</span><span class="token punctuation">)</span></code></pre><p>新建Maven项目：</p><p>​    导入maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--   mysql驱动--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><h4 id="编写核心配置文件"><a href="#编写核心配置文件" class="headerlink" title="编写核心配置文件"></a>编写核心配置文件</h4><p>在src的resource下新建mybatis-config.xml核心配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置文件模板--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--dirver默认："com.mysql.jdbc.Driver"--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--"jdbc:mysql://localhost:3306/数据库名?serverTimezone=UTC--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--数据库用户名--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--数据库用户密码--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--每一个mapper都需要要此核心配置文件中注册--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.dao.StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager--></span></code></pre><h4 id="编写mybatis工具类"><a href="#编写mybatis工具类" class="headerlink" title="编写mybatis工具类:"></a>编写mybatis工具类:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @Author:Fan * @Description: 从xml文件中构建SqlSessionFactory获取sqlSession对象 * @Date:Create in 22:46 2020/5/1 * @Modify By: **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从 XML 文件中构建 SqlSessionFactory 的实例</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>            inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 从 SqlSessionFactory 中获取 SqlSession,SqlSession 提供了在数据库执行 SQL 命令所需的所有方法     sqlSessionFactory.openSession(true)：自动提交     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><h4 id="编写代码："><a href="#编写代码：" class="headerlink" title="编写代码："></a>编写代码：</h4><ul><li><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>dao层接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口实现类  (daoImpl实现类转变的Mapper配置文件)</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.dao.StudentDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from student    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 方式一：getMapper         * 使用和指定语句的参数和返回值相匹配的接口（比如 BlogMapper.class），代码不仅更清晰，更加类型安全，还不用担心可能出错的字符串字面值以及强制类型转换。         */</span>        StudentDao studentDao<span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span>  studentList <span class="token operator">=</span> studentDao<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 方式二：通过 SqlSession 实例来直接执行已映射的 SQL 语句         * List&lt;Student> studentList = sqlSession.selectList("com.mybatis.dao.StudentDao.getStudentList");         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行报错问题：</p><ol><li>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</li></ol><p>解决：在核心配置文件中注册mapper</p><ol start="2"><li>java.lang.ExceptionInitializerError</li></ol><p>问题分析：maven由于它的约定大于配置，遇到配置文件无法被导出或生效问题</p><p>解决：在build中配置resourse，防止资源导出失败问题</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p><strong>CRUD： 增删修时需要提交事务  ————》sqlSession.commit(); 若没有进行此操作数据在增删修的操作是失败的</strong></p><h2 id="Map与模糊查询"><a href="#Map与模糊查询" class="headerlink" title="Map与模糊查询"></a>Map与模糊查询</h2><p>实体类，或者数据库中的表，字段或者参数过多，应当考虑使用Map！</p><p>Map传递参数，直接在sql中取出key即可！    【parameterType=”map”】</p><p>对象传递参数，直接在sql中取对象的属性即可【parameterType=”Object”】</p><ul><li><p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p></li><li><p>多个参数<strong>用Map</strong>，<strong>或者注解！</strong></p></li></ul><p>模糊查询时：尽量使用以下两种方法：</p><ul><li><p>Java代码执行的时候，传递通配符 % %</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getUserLike</span><span class="token punctuation">(</span><span class="token string">"%zhong%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在sql拼接中使用通配符！</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mybatis<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">"%"</span><span class="token comment" spellcheck="true">#{value}"%"</span></code></pre></li></ul><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><h3 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h3><p> MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。配置文档的顶层结构如下：</p><ul><li>configuration（配置）<ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties" target="_blank" rel="noopener"><strong>properties（属性）</strong></a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener"><strong>settings（设置）</strong></a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener"><strong>typeAliases（类型别名）</strong></a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">plugins（插件）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments" target="_blank" rel="noopener"><strong>environments（环境配置）</strong></a><ul><li><strong>environment（环境变量）</strong><ul><li><strong>transactionManager（事务管理器）</strong></li><li><strong>dataSource（数据源）</strong></li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider" target="_blank" rel="noopener">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener"><strong>mappers（映射器）</strong></a></li></ul></li></ul><h3 id="环境配置environments"><a href="#环境配置environments" class="headerlink" title="环境配置environments"></a>环境配置environments</h3><p>MyBatis 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p><strong>每个数据库对应一个 SqlSessionFactory 实例</strong></p><p>Mybatis默认的事务管理器就是 JDBC  ， 连接池 ： POOLED</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><p>通过properties属性来实现引用数据库配置文件</p><p>在resource目录下编写db.properties</p><pre class=" language-pro"><code class="language-pro">driver=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTCusername=rootpassword=123456</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入外部配置文件       可以在其中增加一些属性配置     如果两个文件有同一个字段，优先使用外部配置文件的！--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--每一个mapper都需要要此核心配置文件中注册--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/mybatis/dao/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><p>类型别名是为 Java 类型设置一个短的名字</p><ul><li><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--可以给实体类起别名 实体类较少时使用  可以自定义名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre></li><li><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！ 自定义名时需要在实体类添加注解：@Alias("user")--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 </p><p>比较重要的：</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true|false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true|false</td><td>false</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true|false</td><td>false</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J|LOG4J|LOG4J2|COMMONS_LOGGING</td><td>未设置</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）</td><td>true|false</td><td>false</td></tr></tbody></table><h3 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一： 【推荐使用】</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/kuang/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>方式二：使用class文件绑定注册</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>方式三：使用扫描包进行注入绑定</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.kuang.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><p>方式二和方式三注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><pre class="mermaid">graph LR;  A(Start)-->B(SqlSessionFactoryBuilder)  a(mybatis-config.xml 配置文件) -->B  B-->C(SqlsessionFactory)  C-->D(SqlSession)  D-->E(SQL Mapper)  E-->F(end)  D-->F</pre><p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>相当于数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间<strong>一直存在</strong>，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong> </li><li>因此 SqlSessionFactory 的最佳作用域是<strong>应用作用域</strong>。 </li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是<strong>不能被共享</strong>的，所以它的最佳的作用域是<strong>请求或方法作用域</strong>。</li><li><strong>用完之后需要赶紧关闭，否则资源被占用</strong>！</li></ul><pre class="mermaid">graph LRA(SqlSessionFactory)-->B(SqlSession)A-->C(SqlSession  SqlSession为一个请求)A-->D(SqlSession)C-->E(Mapper  每一个Mapper代表具体的业务)C-->F(Mapper  每一个Mapper代表具体的业务)</pre><h3 id="解决属性名和字段名不一致问题"><a href="#解决属性名和字段名不一致问题" class="headerlink" title="解决属性名和字段名不一致问题"></a>解决属性名和字段名不一致问题</h3><p>  实体类的成员变量名与对应的数据库的字段名不一致，例如Student实体类的成员属性名为 studentId,对应数据库的字段名为id，这就导致了属性名和字段名不一致，会导致在CRUD操作时出错。</p><p> 解决：</p><ul><li><p>起别名 </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id as studentId,name password from Student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre></li></ul><ul><li><p>resultMap  结果集映射</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--结果集映射--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--column数据库中的字段，property实体类中的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentId<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment" spellcheck="true">&lt;!--属性名与字段名相同可不写    &lt;result column="name" property="name"/>    &lt;result column="password" property="password"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>resultMap 元素是 MyBatis 中最重要最强大的元素</p></li></ul><p>​       <strong>ResultMap 的设计思想：对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了</strong></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>在Mybatis中配置日志：</p><h4 id="STDOUT-LOGGING-标准日志输出"><a href="#STDOUT-LOGGING-标准日志输出" class="headerlink" title="STDOUT_LOGGING 标准日志输出"></a>STDOUT_LOGGING 标准日志输出</h4><p>   可直接使用，不用添加jar包</p><p>   核心文件mybatis-config.xml :</p><pre><code>&lt;!--value值可变为其他的日志类型--&gt;&lt;settings&gt;    &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;&lt;/settings&gt;</code></pre><h4 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h4><ul><li><p>通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</p></li><li><p>控制每一条日志的输出格式</p></li><li><p><strong>定义每一条日志信息的级别</strong>，更加细致地控制日志的生成过程</p></li><li><p><strong>通过一个配置文件来灵活地进行配置</strong>，而不需要修改应用的代码</p></li></ul><p>​    引入包文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>  log4j.properties   <a href="https://www.jianshu.com/p/ccafda45bcea" target="_blank" rel="noopener">Log4J配置详解</a></p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"> #常见配置</span><span class="token comment" spellcheck="true">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关设置</span><span class="token attr-name">log4j.appender.console</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span> <span class="token punctuation">=</span> <span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/mybatis.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{yy-MM-dd}][%c]%m%n</span><span class="token comment" spellcheck="true">#日志输出级别</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--设置日志类型为Log4j--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>StudentDaoTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">log4jTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"进入error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"进入debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***日志文件输出信息*[INFO][20-05-04][com.mybatis.dao.StudentDaoTest]进入info*[ERROR][20-05-04][com.mybatis.dao.StudentDaoTest]进入error*[DEBUG][20-05-04][com.mybatis.dao.StudentDaoTest]进入debug*/</span></code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>  目的：减少数据的处理量</p><h3 id="Limit分页"><a href="#Limit分页" class="headerlink" title="Limit分页"></a>Limit分页</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">limit</span> startIndex<span class="token punctuation">,</span>pageSize<span class="token comment" spellcheck="true">#startIndex :开始查询信息的下标  从0开始</span><span class="token comment" spellcheck="true">#pageSize：每页显示的数据数量 例如：3，每页显示3条数据 </span><span class="token comment" spellcheck="true">#只给了startIndex参数表示显示多条信息</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getStudentByLimit</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from student limit #{startIndex},#{pageSize}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentByLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入getStudentByLimit方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            StudentDao mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"startIndex"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudentByLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h3 id="RowBounds分页"><a href="#RowBounds分页" class="headerlink" title="RowBounds分页"></a>RowBounds分页</h3><p>  不再使用SQL实现分页   不建议使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getStudentByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudentByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from student    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentByRowBoundsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token operator">=</span>   sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.mybatis.dao.StudentDao.getStudentByRowBounds"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Mybatis-PageHelper-插件"><a href="#Mybatis-PageHelper-插件" class="headerlink" title="Mybatis PageHelper 插件"></a>Mybatis PageHelper 插件</h3><p>大数据背景下相对 Sql limit效率比较慢</p><h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>注解本质：反射机制实现</p><p>底层：动态代理</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getStudentListByAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- &lt;mapper resource="com/mybatis/dao/StudentMapper.xml"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.dao.StudentDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentListByAnnotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进入getStudentListByAnnotationTest()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentDao mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudentListByAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>mybatis详细的执行流程</p><pre class="mermaid">graph TBA(Resources获取加载全局配置文件) -->B(实例化SqlSessionFactoryBuilder构造器)B -->C(解析配置文件流XMLConfigBuilder)C -->D(Configuration所有的配置信息)D -->E(SqlsessionFactory实例化)E -->F(Transactional事务管理)F -->G(创建execuor执行器)G -->H(创建sqlsession)H -->I(实现CRUD)I -->J(查看是否执行成功)J -->K(提交事务)K -->L(关闭)I -->FJ -->F</pre><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><h3 id="多对一处理（关联关系）N-1查询问题"><a href="#多对一处理（关联关系）N-1查询问题" class="headerlink" title="多对一处理（关联关系）N+1查询问题"></a>多对一处理（关联关系）N+1查询问题</h3><p> N+1查询问题：</p><ul><li><p>你执行了一个单独的 SQL 语句来获取结果的一个列表（就是“+1”）。</p></li><li><p>对列表返回的每条记录，你执行一个 select 查询语句来为每条记录加载详细信息（就是“N”）。</p><p>情景：数据库Mybatis中有两张表，分别是Teacher和Student表</p></li></ul><h4 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h4><ol><li><p>新建MybatisUitl类获取SqlSession</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtil</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">static</span> <span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>           String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>           InputStream resourceAsStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>           sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li><li><p>新建实体类Student，Teacher </p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TeacherMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from teacher where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Teacher <span class="token function">getTeacherById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li><li><p>建立Mapper接口和.xml文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>                <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.mybatis.dao.StudentMapper"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.mybatis.dao.TeacherMapper"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre></li><li><p>核心文件中注册mapper映射</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- &lt;mapper resource="com/mybatis/dao/StudentMapper.xml"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    &lt;/mappers</code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherMapperTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>TeacherMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher teacher <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getTeacherById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="嵌套-Select-查询"><a href="#嵌套-Select-查询" class="headerlink" title="嵌套 Select 查询"></a>嵌套 Select 查询</h4><ul><li><p>通过执行另外一个 SQL 映射语句来加载期望的复杂类型（子查询）</p><p>例如：查询学生对应的学生和教师全部信息   （笛卡尔积）</p></li></ul><p>​    sql语句：</p><pre class=" language-sql"><code class="language-sql">    <span class="token keyword">select</span> student<span class="token punctuation">.</span>id <span class="token keyword">as</span> 学生id<span class="token punctuation">,</span>student<span class="token punctuation">.</span>name <span class="token keyword">as</span> 学生姓名<span class="token punctuation">,</span>tid <span class="token punctuation">,</span>teacher<span class="token punctuation">.</span>id <span class="token keyword">as</span> 教师id<span class="token punctuation">,</span> teacher<span class="token punctuation">.</span>name <span class="token keyword">as</span> 教师姓名 <span class="token keyword">from</span> student<span class="token punctuation">,</span>teacher <span class="token keyword">where</span> tsqleacher<span class="token punctuation">.</span>id <span class="token operator">=</span> student<span class="token punctuation">.</span>tid</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--StudentMapper.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.dao.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--嵌套 Select 查询 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         select * from student <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.dao.TeacherMapper.getTeacherById<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacherById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from teacher where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StudentMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>该查询方式在大型数据集或大型数据表上表现不佳</li><li>加载记录列表之后立刻就遍历列表以获取嵌套的数据，就会触发所有的延迟加载查询，性能可能会变得很糟糕。</li></ul><h4 id="嵌套结果映射："><a href="#嵌套结果映射：" class="headerlink" title="嵌套结果映射："></a>嵌套结果映射：</h4><ul><li><p>使用嵌套的结果映射来处理连接结果的重复子集（联表查询）</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent1<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentTeacher1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid, s.name sname,password,t.id tid,t.name tname from student s,teacher t where s.tid = t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>studentTeacher1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--属性字段必须填写，否则为空值  column：sql语句的别名 或者是--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span>  <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="一对多处理（集合关系）"><a href="#一对多处理（集合关系）" class="headerlink" title="一对多处理（集合关系）"></a>一对多处理（集合关系）</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//学生列表</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Teacher <span class="token function">getTeacherByTid</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> Teacher <span class="token function">getTeacherByTid2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"tid"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="嵌套-Select-查询-1"><a href="#嵌套-Select-查询-1" class="headerlink" title="嵌套 Select 查询"></a>嵌套 Select 查询</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    嵌套select查询<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getTeacherByTid2"</span> resultMap<span class="token operator">=</span><span class="token string">"TeacherStudent2"</span><span class="token operator">></span>        select <span class="token operator">*</span> from teacher where id <span class="token operator">=</span>#<span class="token punctuation">{</span>tid<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"TeacherStudent2"</span> type<span class="token operator">=</span><span class="token string">"com.mybatis.entity.Teacher"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"id"</span> column<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"studentList"</span> column<span class="token operator">=</span><span class="token string">"id"</span> ofType<span class="token operator">=</span><span class="token string">"com.mybatis.entity.Student"</span> select<span class="token operator">=</span><span class="token string">"getStudentByTeacherId"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getStudentByTeacherId"</span> resultType<span class="token operator">=</span><span class="token string">"com.mybatis.entity.Student"</span><span class="token operator">></span>        select <span class="token operator">*</span> from Student where tid <span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><h4 id="嵌套结果映射：-1"><a href="#嵌套结果映射：-1" class="headerlink" title="嵌套结果映射："></a>嵌套结果映射：</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    嵌套结果查询<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getTeacherByTid"</span> resultMap<span class="token operator">=</span><span class="token string">"TeacherStudent"</span><span class="token operator">></span>        select s<span class="token punctuation">.</span>id sid<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span>t<span class="token punctuation">.</span>id tid<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name tname         from student s<span class="token punctuation">,</span>teacher t where s<span class="token punctuation">.</span>tid <span class="token operator">=</span> t<span class="token punctuation">.</span>id and t<span class="token punctuation">.</span>id <span class="token operator">=</span>#<span class="token punctuation">{</span>tid<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"TeacherStudent"</span> type<span class="token operator">=</span><span class="token string">"com.mybatis.entity.Teacher"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"id"</span> column<span class="token operator">=</span><span class="token string">"tid"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"name"</span> column<span class="token operator">=</span><span class="token string">"tname"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>ofType 用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>collection property<span class="token operator">=</span><span class="token string">"studentList"</span> ofType<span class="token operator">=</span><span class="token string">"com.mybatis.entity.Student"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>id property<span class="token operator">=</span><span class="token string">"id"</span> column<span class="token operator">=</span><span class="token string">"sid"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"name"</span> column<span class="token operator">=</span><span class="token string">"sname"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"tid"</span> column<span class="token operator">=</span><span class="token string">"tid"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>collection<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span></code></pre><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p> 在JDBC或者其他类似框架根据不同的条件拼接成SQL语句是一件比较痛苦的事</p><p>Mybatis借助功能强大的基于 OGNL 的表达式来使用动态SQL</p><p>使用动态 SQL <strong>最常见情景是根据条件包含 where 子句的一部分</strong></p><p><strong>动态SQL本质还是SQL语句，只是在SQL语句层面上执行逻辑代码</strong></p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//BlogMapper.java</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">queryBlogIf</span><span class="token punctuation">(</span>Map map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIf<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from blog where 1=1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title like #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           and views >= #{views}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogIfTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查询title like “你好” 并且views > =100 的blog</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIf</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h4><p><strong>不想使用所有的条件</strong>，而只是想<strong>从多个条件中选择一个使用</strong>。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from  blog where 1=1       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and views >= #{views}           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and title like #{title}           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>               and author =#{author}           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogChooseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span><span class="token string">"fire"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogChoose</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>注意：使用choose 时 里面的属性值必须有一个不为空,否则查询的信息为 null</p><h4 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h4><p>在之前的if 条件语句中，sql查询语句 后面必须跟一个静态的 where 语句 ，例如 where  name= ”fire“ ，name属性必须跟一个确定的属性值，要想将  name= ”fire“ 设置成动态条件，MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求，就是 where 标签</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogWhere<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title like #{title}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and views >= #{views}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogWhereTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> blogs <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">queryBlogIf</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Blog blog <span class="token operator">:</span> blogs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句</strong>。而且，若<strong>子句的开头为 “AND” 或 “OR”，where元素也会将它们去除</strong>。 上述代码验证了这一点 ，通过查看发现日志发现，子句开头内容的情况下，sql查询的语句 变为：select * from blog <strong>where 1=1</strong> and views &gt;= ?   ；与上述if 示例的 sql 语句 相同用 where 1=1 替代</p><p>自定义 trim 元素来定制 <em>where</em> 元素的功能</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogWhereTrim<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from blog       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span>  <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>and |or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and title like "%"#{title}"%"           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               and views >= #{views}           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><p>prefixOverrides 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会<strong>移除所有 prefixOverrides 属性中指定的内容</strong>，并且<strong>插入 prefix属性中指定的内容</strong>。</p><p><strong>用于动态更新语句的类似解决方案叫做 <em>set</em></strong></p><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号</p><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--,不可去掉--></span>                title = #{title},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                views = #{views}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"34b6f808f0fd4f5198f6a441a1b2c4e8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> mapper<span class="token punctuation">.</span><span class="token function">updateBlog</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>与 <em>set</em> 元素等价的自定义 <em>trim</em> 元素</p><pre><code>&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;  ...&lt;/trim&gt;</code></pre><h4 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h4><p> 使用SQL标签抽取公共的部分（最好基于单表来定义，不要存在where 标签，尽量用if）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-views<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title like #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and views >= #{views}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogWhere<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--&lt;if test="title != null">                title like #{title}            &lt;/if>            &lt;if test="views != null">                and views >= #{views}            &lt;/if>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-views<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>动态 SQL 的另一个<strong>常见使用场景是对集合进行遍历</strong>（尤其是在<strong>构建 IN 条件语句</strong>的时候）</p><p>它<strong>允许指定一个集合</strong>，声明可以<strong>在元素体内使用的集合项（item）和索引（index）变量</strong>。它也允许你<strong>指定开头与结尾的字符串以及集合项迭代之间的分隔符</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--官方示例    collection:集合类型 ：List，Set，Map对象或者数组    index 是当前迭代的序号    item 的值是本次迭代获取到的元素 # 当使用Map对象或Map.Entry对象时，index为key，item为value    open="(" separator="," close=")"：指定开头与结尾的字符串以及集合项迭代之间的分隔符--></span>select id="selectPostIn" resultType="domain.blog.Post">  SELECT *  FROM POST P  WHERE ID in  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>      <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{item}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>练习：</p><ul><li>查询id为2,3,4的内容</li></ul><p>​      sql语句：select * from blog where id in(2,3,4)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mybatis.entity.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from blog        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> id in (<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>               #{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryBlogForeachTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ids"</span><span class="token punctuation">,</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ids 必须放进 map对象中 ，若ids的里面的值为空，查询语句变为：select * form blog</span>        mapper<span class="token punctuation">.</span><span class="token function">queryBlogForeach</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><ul><li>默认开启（SQLSession 级别缓存，也称本地缓存）</li><li><strong>只在一次SqlSession中有效</strong>，也就是拿到连接到关闭连接这个区间段</li></ul><p>​    测试：在同一个sqlsession 会话中两次查询相同的数据时，第二次直接从缓存中获取,而在里一个测试方法获取相同数据时，还需要重新打开数据库连接后获取。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllBlogTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> allBlog <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getALLBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========getAllBlogTest========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allBlog<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">getALLBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAllBlogTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtil<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BlogMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> allBlog <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getALLBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========getAllBlogTest1========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allBlog<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>日志部分输出分析：</p><pre class=" language-xml"><code class="language-xml">[org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC ConnectionLoading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com[org.apache.ibatis.datasource.pooled.PooledDataSource]-Created connection 2129144075.[com.mybatis.dao.BlogMapper.getALLBlog]-==>  Preparing: select * from blog [com.mybatis.dao.BlogMapper.getALLBlog]-==> Parameters: [com.mybatis.dao.BlogMapper.getALLBlog]-&lt;==      Total: 6=========getAllBlogTest=========[Blog(id=1, title=你好, author=fire, createTime=Thu May 14 14:48:56 CST 2020, views=200),[Blog(id=1, title=你好, author=fire, createTime=Thu May 14 14:48:56 CST 2020, views=200),<span class="token comment" spellcheck="true">&lt;!--在getAllBlogTest第二次没有查询SQL语句直接获取数据--></span>                                                [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Opening JDBC Connection[org.apache.ibatis.datasource.pooled.PooledDataSource]-Checked out connectio[com.mybatis.dao.BlogMapper.getALLBlog]-==>  Preparing: select * from blog [com.mybatis.dao.BlogMapper.getALLBlog]-==> Parameters: [com.mybatis.dao.BlogMapper.getALLBlog]-&lt;==      Total: 6                                               =========getAllBlogTest1=========[Blog(id=1, title=你好, author=fire, createTime=Thu May 14 14:48:56 CST 2020, [org.apache.ibatis.transaction.jdbc.JdbcTransaction]-Closing JDBC Connection<span class="token comment" spellcheck="true">&lt;!--getAllBlogTest1中获取数据时仍需要重新查询sql语句，说明在getAllBlogTest 测试中获取的缓存已经失效--></span>                                               </code></pre><p>缓存失效：</p><ul><li>增删改的操作可能会改变原始数据，所以一定会刷新缓存</li><li>查询不同的东西</li><li>查询不同个的Mapper.xml文件</li><li>手动清理缓存   sqlsession.clearCache();</li></ul><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><ul><li><p>需手动开启和配置（基于namespace 级别缓存，全局缓存）</p></li><li><p>一个名称空间对应一个二级缓存</p></li><li><p>Mybatis定义了缓存接口Cache，通过<strong>实现Cache接口来自定义二级缓存</strong></p></li><li><p>所有的数据都会先放在一级缓存中</p></li><li><p>只有当会话提交或者关闭时，才会提交到二级缓存</p></li><li><p>不同mapper查出的数据会放在自己对应的缓存中</p><p>使用二级缓存：</p><ul><li><p>Mybatis-config配置文件中设置CacheEnabled 属性为true  默认值为 true</p></li><li><p>在需要二级缓存的Mapper 中开启   增加标签 <cache>即可，这个简单语句的效果如下:</cache></p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li><li>缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。</li><li>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</li><li>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</li><li>缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改</li></ul></li><li><p>若需要高级设置，则可以自定义参数</p><table><thead><tr><th>参数名</th><th>参数作用</th><th>参数值</th></tr></thead><tbody><tr><td>eviction</td><td>清除策略</td><td>LRU（default）、FIFO，SOFT，WEAK</td></tr><tr><td>flushInterval</td><td>刷新间隔，一个以毫秒为单位的合理时间量</td><td>任意正整数 若有这个参数值不可设为0，否则二级缓存进不去</td></tr><tr><td>size</td><td>引用数目</td><td>任意任意正整数（default为1024）</td></tr><tr><td>readOnly</td><td>是否只读</td><td>true、false（default）</td></tr></tbody></table><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象</li><li>只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升</li><li>可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全</li></ul></li></ul></li></ul><p>注意点：<strong>二级缓存是事务性的</strong>。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，<strong>但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新</strong></p><p>测试错误： 单单使用<cache>标签时或者readOnly 的值为true时 很有可能出现.NotSerializableException</cache></p><p>Caused by: java.io.NotSerializableException</p><p>  解决方法：需要将实体类序列化  </p><h4 id="自定义缓存"><a href="#自定义缓存" class="headerlink" title="自定义缓存"></a>自定义缓存</h4><p>以通过实现自己的缓存，或为其他第三方缓存方案创建适配器，来完全覆盖缓存行为</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/posts/1406167115/"/>
      <url>/posts/1406167115/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="阿里云服务器："><a href="#阿里云服务器：" class="headerlink" title="阿里云服务器："></a>阿里云服务器：</h2><ol><li><p>设置安全组：用来开启端口，否则外部无法访问（端口映射）</p></li><li><p>获取服务器的公网ip地址；修改实例名称和密码，第一次修改需要重启，使用xshell远程连接</p></li><li><p>搭建环境：</p><ul><li><p>傻瓜式（宝塔面板）</p><p><a href="https://www.bt.cn/download/linux.html" target="_blank" rel="noopener">https://www.bt.cn/download/linux.html</a></p><p><a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p></li><li><p>命令式（原生）</p></li></ul></li><li><p>Xshell连接服务器</p></li></ol><h2 id="系统文件："><a href="#系统文件：" class="headerlink" title="系统文件："></a>系统文件：</h2><p>shutdown：关机指令</p><p>sync：将数据由内存同步到硬盘中（不管重启系统还是关机，建议首先运行sync命令）</p><p>reboot：重启</p><p>halt：关闭系统</p><p>系统目录结构：（树状目录）</p><ol><li>一切皆目录</li><li>根目录/ ，所有的文件都挂载这个节点上</li></ol><table><thead><tr><th align="left">目录</th><th>解释</th></tr></thead><tbody><tr><td align="left">/bin</td><td>binary的缩写，存放最经常用的命令</td></tr><tr><td align="left">/boot</td><td>存放启动Linux时使用的核心文件，包括一些连接以及镜像文件（不要动）</td></tr><tr><td align="left">/dev</td><td>Device的缩写，存放Linux的外部设备</td></tr><tr><td align="left">/etc</td><td><strong>存放所有的系统管理所需要的的配置文件和子目录</strong></td></tr><tr><td align="left">/home</td><td><strong>用户的主目录，在Linux中都有一个自己的目录，一般目录名为用户的账号命名</strong></td></tr><tr><td align="left">/lib</td><td>存放系统最基本的动态连接共享库，其作用类似于Windows的DLL文件</td></tr><tr><td align="left">/opt</td><td><strong>主机额外安装软件所摆放的目录(默认为空)</strong></td></tr><tr><td align="left">/proc</td><td>一个虚拟目录，是系统内存的映射，可以通过直接访问该目录获取系统信息</td></tr><tr><td align="left">/root</td><td>超级权限者的用户主目录</td></tr><tr><td align="left">/sbin</td><td>s为super user的意思，存放系统管理员使用的系统管理工具</td></tr><tr><td align="left">/srv</td><td>存放一些服务启动之后的需要提取的数据</td></tr><tr><td align="left">/sys</td><td>linux2.6内核的很大的变化，该目录安装了2.6内核新出现的文件系统sysfs</td></tr><tr><td align="left">/tmp</td><td>存放临时文件</td></tr><tr><td align="left">/usr</td><td><strong>非常重要的目录，用户的很多应用程序和文件都存放于这个目录，类似于Windows的program files目录</strong></td></tr><tr><td align="left">/usr/bib</td><td>系统用户使用的应用程序</td></tr><tr><td align="left">/lost+found</td><td>系统非法关机后，存放突然关机的一些文件（一般为空）</td></tr><tr><td align="left">/usr/src</td><td>内核源代码默认的放置目录</td></tr><tr><td align="left">/var</td><td><strong>存放不断扩充的文件，习惯将经常修改的目录放在此目录，包括各种日志文件</strong></td></tr><tr><td align="left">/run</td><td>临时文件系统，存储系统启动以来的信息，系统重启时，这个目录的文件应该被删除</td></tr></tbody></table><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="目录管理："><a href="#目录管理：" class="headerlink" title="目录管理："></a>目录管理：</h3><p>​    绝对路径：路径全称</p><p>​    相对路径：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>cd</td><td>切换目录命令</td></tr><tr><td>ls  |-a  |-l</td><td>列出目录  |查看全部文件，包括隐藏文件 | 列出所有文件，包含文件属性和权限，没有隐藏文件</td></tr><tr><td>pwd</td><td>显示当前目录所在目录路径</td></tr><tr><td>mkdir -p</td><td>创建目录  递归创建</td></tr><tr><td>rmdir  -p</td><td>移除空目录  如果目录存在文件，需要先删除文件  递归删除多个目录</td></tr><tr><td>rm -f  -r -i</td><td>移除文件或目录  忽略不存在的文件，不会出现警告，强制删除   递归删除目录   互动</td></tr><tr><td>cp</td><td>复制文件或目录</td></tr><tr><td>mv -f  -u</td><td>移动文件或目录（重命名）   强制   只替换已经更新的文件</td></tr></tbody></table><h3 id="文件基本属性："><a href="#文件基本属性：" class="headerlink" title="文件基本属性："></a>文件基本属性：</h3><p>  使用 ls -ll 查看文件时 ，出现的文件的基本属性解读：</p><p>第一个字符代表这个文件时目录，文件或链接文件</p><ul><li>[d] 目录 </li><li>[-]  文件</li><li>[l] 链接文件（link file）</li><li>[b] 表示装置文件里面的可存储的接口设备</li><li>[c] 表示装置文件里面的串行端口设备（例：键盘 ，鼠标）</li></ul><p>接下来的字符以三个为一组且都是【rwx】的三个参数组合</p><p>[r] read 可读</p><p>[w] wirte 可写</p><p>[x] execute 可执行</p><p>注意：这三个权限的位置不会改变 ，如果没有权限，就会出现减号[-]代替</p><p>每个文件的属性由十个字符确定：</p><p> 0 ：文件类型</p><p>1-3：属主权限</p><p>4-6：属组权限</p><p>7-9：其他用户权限</p><h3 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h3><ol><li><p>chgrp：更改文件属组    chgrp [-R] 属组名 文件名</p></li><li><p>chown:更改文件属主，也可以同时更改文件属组   chown [-R] 属主名 文件名    chown [-R] 属主名: 属组名 文件名</p></li><li><p><strong>chmod ：更改文件的9个属性  chmod [-R] xyz 文件或目录</strong></p><p>Linux文件属性两种设置：</p><ul><li><p>数字（常用）</p><p>各个权限的分数对照 ： r: 4  w:2 e:1 </p><p>每种身份（owner/group/others）各自的三个权限（r/w/e）分数需要累加：</p><p>例如：权限为：[rw-r-e-rw]的分数为： 653   修改时：chmod 653 filename</p><p>chmod 777 文件赋予所有用户可读可执行</p></li><li><p>符号</p></li></ul><p>Linux 的基本权限就有9个，分别是owner/group/others 三种身份各有各的R/W/E权限</p></li></ol><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><ul><li>cat ：由第一行开始显示文件内容</li><li>tac ：最后地hang开始显示 文件内容</li><li>nl : 显示时输出行号</li><li>more ： 一页一页显示 （空格代表翻页，enter代表向下看一行，:f 行号）</li><li><strong>less ： 与more类似，可以往前翻页 （退出q命令） 查找字符串: /+要查询的字符串（向下查询） ?+查询的字符（向上查询） n继续搜寻下一个，N代表向上搜寻</strong> </li><li>head -n：只看头几行   通过-n控制显示几行</li><li>tail： 只看最后几行</li></ul><h3 id="Linux链接"><a href="#Linux链接" class="headerlink" title="Linux链接"></a>Linux链接</h3><ol><li><p>硬链接：A—B，假设B是A的硬链接，那么他们两个指向了同一个文件！允许一个文件拥有多个路径，通过该机制建立硬链接到一些重要文件上，防止误删</p></li><li><p>软连接：类似windows 的快捷方式</p><p>ln：创建链接    ln -s :创建软连接   </p><p>touch：命令创建文件</p><p>echo ：输入字符串      echo “内容”   &gt;&gt;文件名</p></li></ol><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p>三种模式：命令模式，输入模式，底线命令模式（Last  line mode）</p><p>命令模式：</p><ul><li>i 切换到输入模式，以输入字符</li><li>x 删除当前光标所在处的字符</li><li>： 切换到底线命令模式，以在最底一行输入模式</li></ul><p>：wq   保存退出       快捷键：ZZ</p><p>:set nu :显示行号</p><h3 id="Linux账号管理"><a href="#Linux账号管理" class="headerlink" title="Linux账号管理"></a>Linux账号管理</h3><p><strong>用户的账号管理</strong>工作涉及到用户账号的添加，修改和删除</p><p>添加用户账号就是在相同中创建一个新账号，然后为新账号分配用户号，用户组，主目录和登录Shell等资源</p><ul><li><p>useradd  添加用户</p><p>-c：指定一段注释性描述</p><p>-m：自动创建这个用户的主目录</p><p>-g  用户组：指定用户所属的用户组</p><p>-G 用户组：指定用户所属的附加组</p></li><li><p>userdel  删除用户</p><p>-r ：用户的主目录删除</p></li><li><p>usermod  修改用户</p></li><li><p>su 用户名  切换用户</p></li></ul><p>修改主机名： hostname   主机名    </p><p>用户的密码设置：passwd  用户名   </p><p>锁定账户   passwd -l 用户名        锁定后该用户不能登录   passwd -d 用户名   空密码也不能登录</p><p><strong>用户组管理</strong></p><p>用户组的管理涉及用户组的添加，删除，修改。组的增加和修改实际上就是对/etc/group文件的更新</p><p>创建一个用户组： groupadd  用户组名   创建用户组后可以得到一个组的id，该id可以指定   -g  id</p><p>删除一个用户组:    groupdel  用户组名</p><p>修改用户组： groupmod  -g  -n      -g: 修改id   -n：修改名</p><p>   文件的查看：</p><p>​    /etc/passwd </p><p>​    用户名：口令(登录密码，不可见 一般用x表示)：用户标识号：组标识号：注释性描述：主目录：登录shell</p><p>​    这个文件的每一行都代表一个用户，从这里可以看出这个用户的主目录在哪里，属于哪一个组</p><p>​    登录口令：把真正的加密后的用户口令字存放在/etc/shadow文件中，保证密码的安全性（MD5加密）</p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul><li>df    列出文件系统整体的磁盘使用量   -h： 显示xx M</li><li>du   检查磁盘使用量   du -sm /*   检查根目录下每个目录搜占用的容量</li></ul><p>Linux 挂载本地磁盘或文件</p><p> mount  /dev/外部设备文件 /mnt/挂载文件</p><p>umount -f [挂载位置] 强制卸载</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul><li>在Linux中，每个程序都有自己的进程，每个进程都有id</li><li>每个进程都会有父进程</li><li>进程的两种存在方式：前台 和 后台运行</li><li>一般的话服务都是后台运行，基本程序都是前台运行</li></ul><p>命令：</p><p>ps ：查看当前系统中正在执行的各种进程的信息</p><p>-a ：显示当前终端运行的所有的进程信息</p><p>-u：以用户的信息显示进程</p><p>-x：显示后台运行进程的参数</p><p><strong>注意：|  在Linux中叫做 管道符   例：A|B 将A命令的结果作为输出来操作B命令</strong></p><p>  grep :查找文件中符合条件的字符串 </p><p>例如： ps -aux |grep  java   查找关于java的进程</p><p>ps -ef  ：查看父进程的信息</p><p> pstree  -pu：利用进程树结构查看</p><p><strong>结束进程</strong></p><p>kill -9  进程的id</p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>查看防火墙服务状态： systemctl status firewalld</p><p>开启，关闭，重启 firewalld.service服务</p><p>​    开启：service firewalld start</p><p>​    关闭：service firewalld stop</p><p>​    重启：service firewalld restart</p><p>查看防火墙规则：</p><p>​    查看全部信息：firewall-cmd –list-all</p><p>​    只看端口信息：firewall-cmd –list-ports</p><p>开启端口：firewall-cmd –zone=public –add-port=80/tcp –permanent</p><p>​        -zone ：作用域</p><p>​        –add-port=80/tcp：添加端口号   格式：端口/通讯协议</p><p>​        –permanent：永久生效</p><p>重启防火墙 ：systemctl restart firewalld.service</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装软件三种方式：rpm ，解压缩，yum在线安装</p><p>rpm安装jdk：</p><ol><li><p>下载jdk rpm安装包</p></li><li><p>将rpm 安装包存放安装目录</p></li><li><p>安装Java环境</p><p>检查是否存在java环境   （如果有需要卸载：rpm -qa|grep jdk  , rpm -e –nodeps 上条命令查询的信息）</p><p>rpm -ivh jdk安装包  </p></li><li><p>配置环境 /etc/profile</p><p>添加信息：</p><pre><code>JAVA_HOME=usr/java/jdk1.8.0_221-amd64   (根据自己的具体路径配置)CLASSPATH=%JAVA_HOME%/lib;%JAVA_HOME%/jre/libPATH=%JAVA_HOME%/bin；%JAVA_HOME%/jre/binexport PATH CLASSPATH JAVA_HOME</code></pre></li><li><p>配置文件生效： source  /etc/profile</p></li></ol><p>解压缩安装： tar -zxvf  安装包路径</p><p>yun安装：</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML</title>
      <link href="/posts/2807274217/"/>
      <url>/posts/2807274217/</url>
      
        <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Extensible Markup Language 可扩展标记语言</p><p>允许开发者自由定义标签，可将标签和内容有效分离</p><p>XML不再侧重于数据如何展示，而是更多地关注数据如何存储和传输</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>XML把数据从HTML分离出来</p><p>简化数据共享</p><p>简化数据的传输</p><p>简化平台的变更</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>简单易用的标记语言</p><p>严格的格式</p><p>数据逻辑和显示逻辑分离    HTML注重显示，XML着重数据存储</p><h2 id="文档规则"><a href="#文档规则" class="headerlink" title="文档规则"></a>文档规则</h2><p>整体结构：</p><ol><li>有且只有一个根元素</li><li>元素必须合理结束</li><li>元素之间必须合理嵌套</li><li>元素的属性必须有值</li></ol><p>XML声明：<?xml version="1.0" encoding="GB2312"  standalone="yes" ?></p><p>字符集：</p><ol><li>简体中文：GBK 或GB2312</li><li>繁体中文：BIG5</li><li>西欧字符：ISO8859-1</li><li>通用的国际编码：Unicode</li><li>针对Unicode 的可变长度字符编码：UTF8</li></ol><p>练习：</p><p>编写第一个XML文件：存储图书信息</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书籍列表</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>计算机书籍</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书名</span><span class="token punctuation">></span></span>java基础<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书名</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>作者</span><span class="token punctuation">></span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>作者</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>价格</span><span class="token punctuation">></span></span>56.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>价格</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>计算机书籍</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>计算机书籍</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>书名</span><span class="token punctuation">></span></span>java进阶<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书名</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>作者</span><span class="token punctuation">></span></span>xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>作者</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>价格</span><span class="token punctuation">></span></span>86.00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>价格</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>计算机书籍</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--空元素示例--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>名著</span> <span class="token attr-name">书名</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>三国<span class="token punctuation">"</span></span> <span class="token attr-name">价格</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45.00<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>书籍列表</span><span class="token punctuation">></span></span></code></pre><h2 id="字符数据"><a href="#字符数据" class="headerlink" title="字符数据"></a>字符数据</h2><p>   开始标签和结束标签之间的文本可以是任何的Unicode字符，并且其间的任何字符都将忠实地传递给XML处理程序</p><p>​    文本字符串不能包含一些特殊的字符，例如 &lt; 或 &amp; ，这些符号在xml文档中有特殊含义，引起文档混乱（只有上面两个符号才会引起文档混乱）</p><h3 id="处理XML文档的特殊字符"><a href="#处理XML文档的特殊字符" class="headerlink" title="处理XML文档的特殊字符"></a>处理XML文档的特殊字符</h3><ol><li><p>使用实体引用（表中的实体引用都需要添加分号才是正确表达）</p><table><thead><tr><th align="center">实体引用</th><th align="center">所代表符号</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&amp;lt</td><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&amp;gt</td><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&amp;amp</td><td align="center">&amp;</td><td align="center">and符号</td></tr><tr><td align="center">&amp;apos</td><td align="center">‘</td><td align="center">英文单引号</td></tr><tr><td align="center">&amp;quot</td><td align="center">“</td><td align="center">英文双引号</td></tr></tbody></table></li><li><p>使用CDATA标记</p><p>在特殊标记CDATA下，所有的特殊字符，甚至是有效的元素都将被当成简单字符处理，实体引用也会失去作用，变成纯文本</p><p>语法：<!--[CDATA[文本内容]]--></p></li></ol><h3 id="W3C对于属性的使用建议"><a href="#W3C对于属性的使用建议" class="headerlink" title="W3C对于属性的使用建议"></a>W3C对于属性的使用建议</h3><p>​    属性通常提供属于数据组成部分的信息，如果属性值里包含的信息是该实体本身，则应该使用子元素来制定该信息，因此，W3C推荐<strong>尽量使用子元素</strong>从而<strong>避免使用属性</strong></p><h2 id="XML命名空间"><a href="#XML命名空间" class="headerlink" title="XML命名空间"></a>XML命名空间</h2><p> 使用原因：在同一份文档中可能出现多个同名的元素和属性</p><p> 语法：xmlns[:prefix] = “命名空间字符串”  </p><pre><code>     命名空间就是给元素指定一个使用区间</code></pre><p> 特征：</p><ol><li>名字很长（命名空间往往是一个绝对的Url地址）</li><li>名字里往往包含英文冒号、斜线等特殊字符</li></ol><p>通常情况下，由于属性是某个元素的，因此很自然地认为属性总是属于他所在元素所处的命名空间，一般<strong>无须专门为属性指定命名空间</strong></p><h2 id="XPath语言"><a href="#XPath语言" class="headerlink" title="XPath语言"></a>XPath语言</h2><p> 一门专门<strong>用于在XML文档中查找信息</strong>的语言，其他XML程序可利用XPath在XML文档中对元素和属性进行导航</p><p>查找标签和属性的原因：XML文档是用来存储数据的，需要将数据提取出来使用，所以通过查找标签和属性进一步获取数据</p><p>Xpath 节点：</p><p>​    文档根节点，元素节点，属性节点，注释节点，命名空间节点，文本节点</p><h3 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h3><p>​    基本值（原子值）：专门用于表示简单的数据值，例如整数值，字符串等，可以<strong>把基本值当成没有父节点且没有子节点</strong>的节点</p><p>​    项：是XPath 2.0提出的术语，<strong>一个项代表一个节点或基本值</strong></p><p>​    节点集和序列：在某些情况下，XPath表达式可以表示多个节点，多个节点组合在一起在XPath1.0中称为节点集 ；XPath2.0 的序列代表一个普通的项，也可以是节点集</p><p>​    节点关系：父节点，子节点，兄弟节点，祖先节点，后代节点</p><p>​    XPath支持相对路径和绝对路径  ；绝对路径以 斜线开头，而相对路径则不会以 斜线开头</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ol><li><p>XPath使用路径表达式来定位XML文档中的节点</p></li><li><p>Xpath中的中步的完整语法格式：轴::节点测试[限定谓语]</p><p>轴：XPath的步使用轴来定义所选节点与当前节点之间的结构关系</p></li></ol><table><thead><tr><th>轴名称</th><th>含义</th></tr></thead><tbody><tr><td>ancestor</td><td>祖先节点</td></tr><tr><td>ancestor-or-self</td><td>祖先节点并包含自身</td></tr><tr><td>attribute</td><td>选择节点的所有属性</td></tr><tr><td>child</td><td>选取当前节点的所有子节点</td></tr><tr><td>parent</td><td>选取当前节点的父节点</td></tr><tr><td>descendant</td><td>当前节点的所有后代节点</td></tr><tr><td>descendant-or-self</td><td>当前节点的所有后代节点包含自身</td></tr><tr><td>self</td><td>当前节点自身</td></tr><tr><td>following-sibling</td><td>选择当前节点的兄弟节点</td></tr></tbody></table><p>​    节点测试：用于从指定轴所匹配的节点集中选出特定的节点</p><table><thead><tr><th>节点测试名称</th><th>含义</th><th>实例</th></tr></thead><tbody><tr><td>nodename</td><td>指从轴匹配的所有节点中选出具有nodename的节点</td><td>child::book</td></tr><tr><td>node()</td><td>选择指定轴匹配的所有类型节点</td><td>child::node()</td></tr><tr><td>text()</td><td>选择指定轴匹配的所有文本类型节点</td><td>chile::text()</td></tr><tr><td>comment()</td><td>选择指定轴匹配的所有注释节点</td><td>descendant::commet()</td></tr><tr><td>*</td><td>通配符，不进行任何过滤</td><td>child::*</td></tr></tbody></table><p>​     限定谓语：是一个Boolean表达式，或者可以转换为Boolean值的表达式，用于进一步提炼所选的节点集。</p><p>​        语法：child::book[1]或child::book[position()=1]</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p> 比较运算符</p><p>逻辑运算符：or  ；and</p><p>组合多个路径的运算符：通过“|”运算符，可以一次选取若干个路径 </p><p>​        例如：book[position()=1] | name[position()=last()]</p><p>节点相关的常见函数</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>fn:position()</td><td>返回当前正在被处理的节点在父节点中的index值</td></tr><tr><td>fn:last()</td><td>返回当前正在被处理的节点列表中项的数目</td></tr><tr><td>fn:name()</td><td>返回当前节点的名称或指定节点集中第一个节点的名称</td></tr><tr><td>fn:root()</td><td>通常返回文档根节点</td></tr></tbody></table><h2 id="DOM，SAX和JAXP解析"><a href="#DOM，SAX和JAXP解析" class="headerlink" title="DOM，SAX和JAXP解析"></a>DOM，SAX和JAXP解析</h2><h3 id="XML文档解析方式"><a href="#XML文档解析方式" class="headerlink" title="XML文档解析方式"></a>XML文档解析方式</h3><p>DOM：文档对象模型，有W3C推荐的处理XML文档的规范</p><p>SAX（Simple API for XML）：整个XML行业的事实规范</p><h3 id="解析原理"><a href="#解析原理" class="headerlink" title="解析原理"></a>解析原理</h3><p>   XML 文档   ——》 XML解析器 ——–》 解析结果</p><p>​    Java解析XML文档的API称为<strong>JAXP</strong>(Java api for xml)</p><p>​    JAXP<strong>只是允许</strong>应用程序在不同的XML解析器之间切换</p><p>​    JAXP提供的与解析相关的类：</p><pre><code> 1. DocumentBuildFactory : 获取DOM解析工程类 2. DocumentBuilder：DOM解析器的标准接口 3. SAXParserFactory:获取SAX解析器的工程类 4. SAXParser:SAX解析器的标准接口</code></pre><h4 id="JAXP的SAX支持："><a href="#JAXP的SAX支持：" class="headerlink" title="JAXP的SAX支持："></a>JAXP的SAX支持：</h4><ul><li><p>SAX的处理机制：采用<strong>事件机制的方式</strong>解析XML文档 ，快速读写的方式</p><p>SAX解析器触发一系列事件，而事件由对应的事件监听器监听，从而触发事件的处理方法，实现对xml文件的访问</p></li></ul><ul><li><p>SAX解析XML文档的流程</p><p>SAX解析器负责在xml文档中“行走”，每当遇到文档开始，元素开始，文本，元素结束和文档结束时，都将负责向外发送事件，而程序员负责提供事件监听器来监听这些事件，并通过事件获取XML文档信息</p></li><li><p>JAXP为SAX解析器提供2组API</p><ul><li><p>XMLReader和XMLReaderFactory:</p><p>createXMLReader()静态方法用于创建XMLReader    （工厂模式）</p></li><li><p>SAXParser和SAXPraserFactory:(常用  比较方便)</p><p>工厂类中的newSAXParser（）实例方法用于创建SAXParser</p></li></ul></li><li><p>SAX解析事件</p><ul><li>ContentHandler：监听XML文档内容处理事件的监听器</li><li>DTDHandler：监听DTD处理事件的监听器</li><li>EntityHandler：监听实体处理事件的监听器</li><li>ErrorHandler：监听解析错误的监听器</li></ul></li><li><p>JAXP提供的DefaultHandler类</p><p>该类实现了上述的4个监听器接口，并为监听器接口所包含的方法提供了空实现</p></li><li><p>SAX解析XML文档的实现思路</p><ul><li>在工程中引入Xerces-J具体解析器实现类Jar包</li><li>自定义事件监听器接口继承自DefaultHandler</li><li>通过SAXParserFactory 的newInstance() 方法创建SAX解析器工厂对象</li><li>通过SAXParserFactory 对象的newSAXparser（）方法创建SAXParser解析器对象</li><li>调用SAXParser对象的parse（）方法解析XML文档</li></ul></li><li><p>SAX生成XML文档的实现思路</p><ul><li><p>创建保存xml的结果流对象 : Result对象：Result resultxx = new StreamResult(File file); </p></li><li><p>获取sax生成工厂对象实例    ：SAXTransfromerFactory xxSTF =SAXTransfromerFactory.newInstance() </p></li><li><p>获取sax生成处理者对象实例 ：TransformerHandler xxTH =   xxSTF.newTransformerHandler(); xxTH.setResult( resultxx) </p></li><li><p>获取sax生成器    ：  Transformer xxtransformer =  xxTH.getTransformer();</p><p>xxtransformer.setOutputProperty(OurputKeys.INDENT,”yes”)   </p></li><li><p>生成文档及文档中的元素 ： 使用transfromerHandler 对象方法</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP</title>
      <link href="/posts/2024902247/"/>
      <url>/posts/2024902247/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP（Java-Server-Page）"><a href="#JSP（Java-Server-Page）" class="headerlink" title="JSP（Java Server Page）"></a>JSP（Java Server Page）</h1><p>根本：简化的Servlet设计</p><p>JSP是在传统的网页HTML文件中插入Java程序段（Scriptlet)和JSP标记（tag) </p><p>JSP开发的web应用是跨平台</p><h2 id="动态项目的结构"><a href="#动态项目的结构" class="headerlink" title="动态项目的结构"></a>动态项目的结构</h2><ul><li>java Resource  包含项目的java源码</li><li>WebContent 所有的web资源（包括HTML,JSP和图形文件等）的指定位置</li><li>WEB-INF 对于Web应用程序，此目录包含支持的web资源，包含web.xml以及classes和lib目录</li><li>/classes  Java编译器产生的类文件输出目录。应用程序类载入器使用此目录中的类来装载运行时所需要的功能</li><li>/lib 包含web应用程序所引用的支持性JAR文件，是综和的资源文件目录</li><li>web.xml  核心文件  标准的web应用程序部署描述符</li></ul><h2 id="JSP程序的执行过程"><a href="#JSP程序的执行过程" class="headerlink" title="JSP程序的执行过程"></a>JSP程序的执行过程</h2><p>客户端用过游览器将.jsp文件发送到web服务器，读取.jsp文件 生成.java文件（Servelet源程序），.java文件编译成.class文件，服务器读取.class文件后返回给用户的是html网页</p><h2 id="JSP基本语法"><a href="#JSP基本语法" class="headerlink" title="JSP基本语法"></a>JSP基本语法</h2><p>JSP声明语法：<strong>&lt;%!</strong>  String str = “hello “ ; <strong>%&gt;</strong>    通常声明全局变量、常量、方法、类</p><ul><li>定义成员变量，以及成员方法</li><li>不能直接包含程序语句  &lt;%!  out.print(“hello”); %&gt;    ×   </li></ul><p>JSP程序脚本：<strong>&lt;%</strong> out.print(“hello”); <strong>%&gt;</strong>   其中可包含局部变量、java语句</p><ul><li>包括变量的声明，表达式和程序逻辑</li><li>声明的变量转换为_service 方法中的变量，因而是<strong>局部变量</strong></li><li>语句块可以自由地与页面代码组合使用</li></ul><p>编程练习  ：输出1到100 的和</p><pre class=" language-jsp"><code class="language-jsp"><%! int sum =0;%><span>1到10的和=</span><% for(int i = 1;i<101;i++){        sum+= i;    }%><%=sum %></code></pre><p>JSP注释： &lt;%– –%&gt; 和 java注释</p><p>JSP内容表达式  <strong>&lt;%=</strong>i <strong>%&gt;</strong></p><p>编程练习：在JSP页面中根据x的值进行判断并得出y的值，并将结果在游览器中居中显示</p><p>   y= {  -1 (x&lt;0)    0 (x=0)  1(x&gt;0) }   输出内容: 当x&lt;0时 ，输出  x= -5   y = -1</p><pre class=" language-jsp"><code class="language-jsp"><%! int x = -8;    int y;%><%if(x<0){%><p style="text-align:center">当x<0时</p> <% y=-1;} else if(x== 0 ){%><p style="text-align:center">当x=0时</p> <% y=0;}else {%><p style="text-align:center">当x>0时</p> <% y=1;}%><% out.println(); %><p style="text-align:center">x=<%=x %></p><%out.println();%><p style="text-align:center">y=<%=y %></p></code></pre><p>JSP包引入 &lt;%@page import =”java.util.Date” %&gt; 不同的包引用可用逗号隔开，作为整体字符串</p><h2 id="JSP内置对象和四种作用域"><a href="#JSP内置对象和四种作用域" class="headerlink" title="JSP内置对象和四种作用域"></a>JSP内置对象和四种作用域</h2><p>Http协议 ： http请求  http响应</p><p>请求与响应模式：</p><p>在JSP中请求和响应对象是通过内置对象存在的</p><p>内置对象（又叫隐含对象，有9个内置对象）：不需要预先声明就可以在脚本代码和表达式中随意使用</p><p>作用域：pageContext，request，session，application</p><p><strong>request对象</strong>：封装了由web游览器或其他客户端生成的HTTP请求的细节（参数，属性，头标和数据） </p><p>​            作用域：用户的请求周期（在相邻两个web资源之间共享同一个request请求对象时使用）</p><p><strong>out</strong>:代表输出流的对象</p><p><strong>response</strong>：封装了返回到Http客户端的输出，向页面作者提供设置响应头标和状态码的方式</p><p><strong>pageContext</strong> ：提供转发请求到其他资源和包含其他资源的方法，提供获取其他内置对象的方法</p><pre><code>1. forward方法来完成请求的转发  2. include 方法    include动态指令 ：添加某一模块部分的jsp页面    完成页面的包含关系 3. pagecontext可以获取其他的内置对象。getRequest，getSession...</code></pre><p> page：代表了正在运行的由JSP文件产生的类对象</p><p>pageContext的作用域：当前执行页</p><p><strong>Session</strong>:主要用于跟踪会话</p><p>​    会话：代表用户第一次进入当前系统知道退出系统或关闭游览器，在此期间与服务器的一系列交互。</p><p>​    作用域：会话期间</p><p> 设置Session的有效时间：session。setMaxInactiveInterval(int second) </p><p>​    该方法常见于：登录一个系统页面后，若几分钟没有操作将需要重新登录</p><p><strong>Config</strong>：获取配置信息</p><p><strong>exception:</strong>异常对象  只能在错误页面使用</p><p>​    要想在页面中使用exception 对象，需要添加&lt;%@ isErrorPage=”true”%&gt;指定该页面为异常捕获页面</p><p>​    有一个页面出现异常，在页面中指定一个错误处理页面，page指令当中，errorpage来指定</p><p><strong>application</strong>对象：提供关于服务器版本，应用及初始化参数和应用内资源绝对路径方式</p><p>​    作用域：web容器的生命周期</p><p>   应用：获取应用的访问量</p><h2 id="通过URL参数的方式来传递数据"><a href="#通过URL参数的方式来传递数据" class="headerlink" title="通过URL参数的方式来传递数据"></a>通过URL参数的方式来传递数据</h2><p>​    规则：资源？key=value&amp;key=value</p><h2 id="JSTL和EL表达式"><a href="#JSTL和EL表达式" class="headerlink" title="JSTL和EL表达式"></a>JSTL和EL表达式</h2><p>EL表达式语法 ：${ 变量名}  代替request获取值</p><p>JSTL标准标签库：（JavaServerPages Standard Tag Library）</p><p>JSTL通常会与EL表达式合作实现JSP页面的编码</p><p>JSTL开发准备：</p><p>​        在jsp页面添加taglib指令&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a> prefix=”c”%&gt;</p><p>JSTL常用标签：</p><p>通用标签：</p><p>set标签：将值保存到指定范围里</p><ul><li><p>将value值存储到范围为scope的变量variable中</p><p>&lt;c:set  var=”username” value=“张三” scope=”request” /&gt;：往request对象存储名为 username 值为张三的数据键值对</p></li></ul><p>out标签：将结果输出显示</p><p>​        &lt;c:out value=”value” /&gt;</p><p>remove标签：删除<strong>指定域内</strong>数据</p><p>​        &lt;c:remove var=”username” scope=”session” /&gt;    </p><p>条件标签： if 标签 ， choose 标签</p><p>if标签： test：接判断的条件，如果条件为true，将执行标签体内的内容</p><p> choose标签需要与when和otherwise标签一起使用</p><p>迭代标签 forEach</p><pre><code> &lt;c:foreach items=&quot;&quot; var=&quot;&quot;&gt; &lt;/c:foreach&gt;</code></pre><p>items :集合   var:数据类型</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>特点：</p><ul><li><p>通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新</p></li><li><p>不使用Ajax的传统网页如果需要更新，必须重载整个网页页面</p></li></ul><p>使用Ajax实现局部更新</p><p>​    引用jquery包</p><p>例：点击登录按钮时触发ajax事件    登录按钮：<input type="button" value="登录" id="login"></p><pre><code>&lt;!--dataType：指明Servlet给Ajax返回数据的数据格式    result:封装了Servlet返回的Ajax的结果--&gt;&lt;script type=&quot;text/javaScript&quot;&gt;    ${&quot;#login&quot;}.click(function(){        $.ajax({            url:&quot;&quot;,            type:&quot;post&quot;,            data:{                username:$(&quot;input[name=username]&quot;).val();                password:$(&quot;input[name=password]&quot;).val()            },            dataType:&quot;json&quot;,            success:function(result){                var flag = result.flag;                if(flag==true){                    window.location.href=&quot;成功页面&quot;;                }                else{                    &lt;!--跳回登录页面--&gt;                }        });    });&lt;/script&gt;</code></pre><p>​    url:请求时的地址</p><p>​    type:请求时数据的传递方式（常用的get/post）</p><p>​    data：用来传递的数据（建议使用json来传递）</p><p>​    success：交互成功后要执行的方法</p><p>​    dataType:ajax 接收后台数据的类型（建议使用json）</p><p>​    注意事项：ajax和后台交互时，<strong>后台是不能够直接跳转到其他页面的</strong></p><p>练习：通过点击不同的按钮页面显示不同的信息</p><pre class=" language-jsp"><code class="language-jsp"><%--  Created by IntelliJ IDEA.  User: Fan  Date: 2020/4/16  Time: 17:30  To change this template use File | Settings | File Templates.--%><%@ page contentType="text/html;charset=UTF-8" language="java" %><script src="js/jquery-3.2.1.js"></script><html>  <head>    <title>欢迎</title>  </head>  <body>  <%    String basePath =request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()    +request.getServletContext().getContextPath()+"/";  %>  <input type="button" id="popularButton" value="流行歌曲" onclick="getText(this.value)" >  <input type="button" id="classicalButton" value="古典歌曲" onclick="getText(this.value)" >  <input type="button" id="rockButton" value="摇滚歌曲" onclick="getText(this.value)" >  <h2 class="1"></h2>  <h2 class="2"></h2>  <h2 class="3"></h2>  </body><script type="text/javascript"> /* var temp =1;  $("#popularButton").click(function () {    $.ajax({      url:"<%=basePath%>/MusicServlet",      type:"post",      data:{        popularButton:$("input[name=popularButton]").val(),      },      dataType:"json",     success :function (result) {       for (var i = 0; i < result.length; i++,temp++) {         var json1 =  result[i];         for(var item in json1){           if(item==temp){             var jValue=json1[item];             console.log(jValue);           }         }       }     }    });  });*/  function getText(param1) {    $(".tips").text(param1);    var temp =1;    $.ajax({      url:"<%=basePath%>/MusicServlet",      type:"post",      data:{       "buttonValue":param1,      },      dataType:"json",      success :function (result) {        for (var i = 0; i < result.length; i++,temp++) {          var json1 =  result[i];          for(var item in json1){            if(item==temp){              var jValue=json1[item];              $("."+temp).text(jValue);            }          }        }      }    })  }</script></html></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author:Fan * @Description: * @Date:Create in 17:36 2020/4/16 * @Modify By: **/</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"MusicServlet"</span><span class="token punctuation">,</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/MusicServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MusicServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String buttonType <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"buttonValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buttonType<span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONArray array<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JSONObject jsonObject1<span class="token operator">=</span>null<span class="token punctuation">;</span>        JSONObject jsonObject2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"流行歌曲"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>buttonType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             jsonObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token string">"{1:成都}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             jsonObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token string">"{2:成都好}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"古典歌曲"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>buttonType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             jsonObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token string">"{1:梅花三弄}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             jsonObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token string">"{2:阳春白雪}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"摇滚歌曲"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>buttonType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            jsonObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token string">"{1:春天里}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jsonObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token string">"{2:不再犹豫}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>jsonObject1<span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>jsonObject2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token operator">+</span>array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JavaScript版 ajax局部更新</p><p>​    关键代码：</p><pre><code>function x (){//创建一个xmlhttpRequest对象var xmlhttp = new XMLHttpRequest();//规定请求的类型，URL以及是否异步处理请求 :true表示异步处理xmlhttp.open(&quot;GET&quot;,url,true);//将请求发送到服务器xmlhttp.sent();//接收服务器端的响应（readyState=4表示请求已完成且响应已就绪 status=200表示请求响应一切正常）xmlhttp.onreadystatechange=function(){if(xmlhttp.onreadyState == 4 &amp;&amp; xmlhttp.status ==200){    //responseText表示服务器返回给ajax的数据    document.getElementById(&quot;xx&quot;).innerHTML  = xmlhttp.responseText;}}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/posts/3424359953/"/>
      <url>/posts/3424359953/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h1><h2 id="js输出"><a href="#js输出" class="headerlink" title="js输出"></a>js输出</h2><ol><li><p>Window.alert ()警告窗</p><p>Window.alert (‘helloworld’)； 内容用单引号’ ‘   window可省略</p></li><li><p>document.write（）写到HTML文档中</p></li><li><p>innerHTML写到HTML元素</p><p>要先获取标签  语法：document.getElementById（’标签名’).innerHTML =” xxxxx”</p></li><li><p>console.log() 写到游览器控制台</p><p>​    console.log(‘xxx’)</p></li></ol><h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><p>字符串 （String） 数字（Number）布尔（Boolean） 数组（Array）对象（Object） 空（Null）</p><p>未定义（Undefined）</p><p>​    <strong>var 可以声明各种类型</strong>  </p><p>​    JavaScript对象   键值对    var person ={name:”xxx”,id:”xxx”};</p><h2 id="js变量"><a href="#js变量" class="headerlink" title="js变量"></a>js变量</h2><p>变量必须以字母开头</p><p>变量也可以以$和_符号开头（不推荐）</p><p>变量名称对<strong>大小写敏感</strong> （y和Y是不同的变量）</p><h2 id="js函数"><a href="#js函数" class="headerlink" title="js函数"></a>js函数</h2><p>函数是由 事件驱动的 或者当它被调用时可执行的可重复使用的代码块</p><p>function a( 参数){  }     声明会前置：不管函数在哪个位置游览器都会将函数前置</p><p>var a = function(参数) {  }</p><h2 id="js的for-in-语法"><a href="#js的for-in-语法" class="headerlink" title="js的for in 语法"></a>js的for in 语法</h2><p> 例子：  var person ={name:”zhangsan”,id:”9527”};   for(xx in person){ console.log(person[key])} </p><p>​                上面 输出为：person对象中的所有key对应的值 即  zhangsan   9527  </p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。它是一种与平台和语言无关的应用程序接口(API),它可以动态地访问程序和脚本,更新其内容、结构和www文档的风格(目前,HTML和XML文档是通过说明部分定义的)。文档可以进一步被处理，处理的结果可以加入到当前的页面。<strong>DOM是一种基于树的API文档</strong>，它要求在处理过程中整个文档都表示在存储器中。另外一种简单的API是基于事件的SAX，它可以用于处理很大的XML文档，由于大，所以不适合全部放在存储器中处理。</p><h3 id="js-获取html标签"><a href="#js-获取html标签" class="headerlink" title="js 获取html标签"></a>js 获取html标签</h3><ol><li><p>document.getElementById</p></li><li><p>document.getElementsByTagName()   获取标签内的标签  结果可能是数组</p><p>例如获取id为main的第一个p标签：var main = ddocument.getElementById(‘’main”); var p =main..getElementsByTagName(“p”)[0];</p></li><li><p>document.getElementsByClass()</p></li></ol><h3 id="修改HTML属性"><a href="#修改HTML属性" class="headerlink" title="修改HTML属性"></a>修改HTML属性</h3><ol><li>element.getAttribute()</li><li>element.setAttribute() //添加或修改</li><li>element.src</li><li>element.href</li></ol><h3 id="修改CSS样式"><a href="#修改CSS样式" class="headerlink" title="修改CSS样式"></a>修改CSS样式</h3><p>​    例子：改变标签的css的颜色： document.getElementById（“xx”).style.color =“xx”</p><h3 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h3><p>写法：</p><ol><li><h1 onclick="this.innerHTML='谢谢！'">请点击该文本 </h1></li><li><p>Element.onclick = function(){  displayDate()};</p></li><li><p>Element.addEventListener(“click”,function(){     })</p></li></ol><h3 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h3><p>添加和删除节点</p><ol><li>document.createElement(“p”)</li><li>document.createTextNode(“新增”) //1和2 一般结合3或4 一起使用</li><li>parent.appendChild(child);       </li><li>parent.removeChild(child);</li></ol><h2 id="JS–Window"><a href="#JS–Window" class="headerlink" title="JS–Window"></a>JS–Window</h2><p>所有的游览器都支持window对象</p><p>所有JavaScript全局对象，函数以及变量均自动成为window对象的成员</p><p>全局变量是window对象的属性</p><p>全局函数是window对象的方法</p><p>window.open()</p><p>window.close()</p><p>window.moveTo() -移动当前窗口</p><p>window.resizeTo()- 调整当前窗口尺寸</p><p>screen.availwidth  屏幕的可用宽度</p><p>screen.availHeight 屏幕的可用高度</p><p>location.hostname 返回web主机的域名‘</p><p>location.pathname 返回当前页面的路径和文件名</p><p>location.protocol 返回所使用的web协议</p><p>location.href 返回当前页面的整个URL</p><p>history.back  后退</p><p>history.forward  向前</p><p>history.go</p><h2 id="JS实现图片轮播特效"><a href="#JS实现图片轮播特效" class="headerlink" title="JS实现图片轮播特效"></a>JS实现图片轮播特效</h2><ol><li><p>如果让超链接a标签不作超链接跳转：<a href="javascript:void(0)"></a>  </p></li><li><p>让几张图片图片重叠在一起 ，使用定位  父相子绝（父级：相对定位，子：绝对定位）</p></li><li><p>使用 display：none  隐藏图片，让特定当前的图片显示 display：block</p></li><li><p>对于同一个产品等级的标签  它的class 应写多个名字来用于写CSS样式  ，将相同的样式和不同的样式分开，减少代码</p><p>例如：上一张和下一张的按钮 ，上一张的命名为 class=“button  pre”,上一张的命名为 class=“button next ”  </p></li><li><p>旋转   transfrom ：rotate（180deg）   透明度：opacity ：0.8  为兼容游览器一般添加 fillter:alpha(opacity=80)</p></li><li><p>水平排列： display:inline-block;</p></li><li><p>让一些形状（例如圆形）有外圈亮的描边： 先设置该形状的背景颜色，再使用阴影颜色</p><p>​     backgroud:rgba(7,1,27，0.8)    box-shadow:0  0  0  2px rgba(255,255,255,0.8)   inset；</p><p>​    rgba的a指透明度          box-shadow:阴影</p></li><li><p>当鼠标停留在轮播的图片时，停止轮播  </p></li><li><p>js判断参数类型   typeof（参数） === “string”? document.getElementById(id) :id</p><p>封装getElementById(id):</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">byId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>    <span class="token keyword">typeof</span>（id） <span class="token operator">===</span> “string”<span class="token operator">?</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">:</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>编写鼠标划过图片事件：业务逻辑为滑过清除定时器  方法：if(timer) clearInterval(timer);</p></li><li><p>编写自动播放图片事件：业务逻辑为切换图片   方法：设置var timer = serInterval(function(){},3000)</p></li><li><p>setInterval(function(){},3000)   :3秒执行一次该方法</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程</title>
      <link href="/posts/3268049553/"/>
      <url>/posts/3268049553/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><p>进程：可执行的程序并存放在计算机存储器的一个指令序列，是<strong>动态执行的过程</strong></p><p>线程：线程是比进程还要小的运行单位，一个进程包含多个线程</p><p>​        线程之间是交互运行的状态</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><ul><li><p>创建一个Thread 类，或者一个Thread子类的对象</p><p>Thread是一个线程类，位于java.lang包下     </p><p>常用方法：run() ;start() —&gt;每个线程的start方法只能启动一次;sleep(); join() –&gt;优先执行调用join()方法的线程</p></li><li><p>创建一个实现Runnabke接口的类的对象</p><p>Runnable接口：</p><ul><li>只有一个run（）方法</li><li>Runnable是JAVA中用来实现线程的接口</li><li><strong>任何实现线程功能的类都必须实现该接口</strong></li></ul></li><li><p>通过继承Thread类的方式创建线程类，重写run方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"该线程正在运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//启动线程  start方法只能调用一次</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果  输出结果随机</span>主线程<span class="token number">1</span>主线程<span class="token number">2</span>Thread<span class="token operator">-</span><span class="token number">0</span> 该线程运行 <span class="token comment" spellcheck="true">//结果分析</span>主方法线程先输出，自定义线程mt后输出 <span class="token punctuation">;</span>准确的说输出结果的顺序是随机的<span class="token punctuation">;</span>线程之间是交互运行的状态</code></pre></li><li><p>通过实现Runnable接口</p><ul><li>实现Runnable接口的原因：Java不支持多继承；不打算重写Thread的方法</li></ul><pre><code>class PrintRunnable implements Runnable{    @Override    public void run(){            System.out.println(Thread.currentThread().getName +&quot;正在运行&quot;));    }}public class ThreadTest(){    public static void main(String[] args){        PrintRunnable pr = new PrintRunnable();        Thread t1 = new Thread(pr);        t1.start();    }}</code></pre></li></ul><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><ul><li>新建（new）</li><li>可运行（Runnable） 也称就绪转态</li><li>正在运行（Running）</li><li>阻塞（Blocked）</li><li>终止（Dead）</li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>创建线程对象  （新建 new） – start()–&gt; (可运行Runnable) &lt; – 时间片用完  —–  获取cpu使用权–&gt;(正在运行Running) — join();wait();sleep();I/O请求 —&gt;（阻塞Blocked）</p><p>阻塞状态（Blocked）<strong>不可直接退回</strong>Running状态 </p><p>阻塞状态（Blocked） —&gt;Runnable   : 1.等待调用join()的线程执行完毕；2.notify()或notifyAll(); 3.sleep 超时； 4. I/O请求完成</p><p>Running  —&gt;Dead : 线程执行完毕或异常终止 </p><p>任何状态都可用 stop() 转化为 Dead 状态，在java中已不建议使用stop()</p><h2 id="方法应用"><a href="#方法应用" class="headerlink" title="方法应用"></a>方法应用</h2><p>Thread 类的sleep()方法:  public <strong>static</strong> void <strong>sleep</strong>(long millis)   休眠</p><p>​    调用sleep 方法 需捕获InterruptedException异常</p><p>Thread 类的join()方法:  public <strong>final</strong> void <strong>join</strong>()   等待调用该方法的线程结束后才能执行</p><p>​    调用join 方法 需捕获InterruptedException异常</p><p>Thread 类的join()方法:  public <strong>final</strong> void <strong>join</strong>(llong millis)  等待调用线程终止的最长时间为mills毫秒</p><p>​    wait()方法：中断方法的执行，使线程等待</p><p>​    notify方法：唤醒处于等待的某一个线程，使其结束等待</p><p>​    nitifyAll()方法：唤醒<strong>所有</strong>处于等待的线程，使它们结束等待</p><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><p>Java为线程类提供了10 个优先级 ，优先级可用整数1-10 表示，超过范围会抛出异常</p><p>主线程默认优先级为5 ，数字越高 优先级越高</p><ul><li>优先级常量( Thread类的常量)<ol><li>MAX_PRIORITY</li><li>MIN_PRIORITY</li><li>NORM_PRIORITY    优先级：5</li></ol></li></ul><p>获取优先级： getPriority（）</p><p>设置线程优先级： setPriority(int newPriority)</p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多线程运行问题</p><ul><li>各个线程是通过竞争CPU时间而获得运行机会</li><li>各线程什么时候得到CPU时间，占用多久，是不可预测</li><li>一个正在运行着的线程在什么地方被暂停也是不可确定</li></ul><p>例子：某一银行有存款和取款操作，为了保证在存款或取款的时候，不允许其他线程对账户余额进行修改的操作；所以需要将Bank对象锁定，将使用<strong>关键字synchronized 实现</strong> ，确保共享对象在同一时刻只能被一个线程访问。</p><p>​    synchronized关键字可以用在 <strong>成员方法</strong>；<strong>静态方法</strong>；<strong>语句块</strong></p><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p>问题：银行系统中账户余额不够 怎么处理？</p><p>解决：  生产者（Producer类进行数据的生产）  ——–》 Queue类 n( x)  ———》 消费者（Comsumer类进行数据的存取）   遵守： 生产一个数据，存读取（消费）一个数据</p><pre><code>public class Queue{    private int n;    Boolean flag = flase;//保证生产一个消费一个而产生的标记变量 true代表    public synchronized int getN(){        if(！flag){            try{                wait();            }catch( InterruptedExcrption e){                e.printStackTrace();            }        }        System.out.println(&quot;消费：&quot;+ n) ;        flag  = false;//消费完毕，容器内没有数据        notifyAll();        return n;    }    public synchronized void setN(int n){        if(flag){            try{                wait();            }catch( InterruptedExcrption e){                e.printStackTrace();            }        }        System.out.println(&quot;生产：&quot;+ n) ;        this.n = n;        flag = true ;//生产完毕，容器内有数据        notifyAll();    }}public class Producer implements Runnable{    Queue queue;    Producer(Queue queue){        this.queue = queue;    }    @override    public void run(){        int i =0;        while(true){            queue.set(i++);            try{                Thread.sleep(1000);            }catch( InterruptedExcrption e){                e.printStackTrace();            }        }    }}public class Consumer implements Runnable(){    Queue queue;    Producer(Queue queue){        this.queue = queue;    }    @override    public void run(){        while(true){            queue.get(i);            try{                Thread.sleep(1000);            }catch( InterruptedExcrption e){                e.printStackTrace();            }        }    }}public class Test{    public statiic void main(String[] args){        Queue queue=new Queue();        new Thread(new Producer(queue)).start();        new Thread(new Producer(Consumer).start();    }}//输出结果生产：1消费：1生产：2消费：2。。。。。。</code></pre><p>​                                                                                                                                                          </p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/1821512031/"/>
      <url>/posts/1821512031/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>IOC(inversion of control):  对象有Spring容器创建，对象属性是Spring容器来设置</p><p>控制的内容：指谁来控制对象的创建；传统的应用程序是由程序本身控制，使用Spring后，由Spring来创建对象</p><p>反转：正转指程序创建对象，反转指程序本身不去创建对象，而变为被动接收的对象</p><p>IOC —- 也称为依赖注入（Denpendency injection ）</p><p>IOC 是一种编程思想。由主动编程变为被动接收</p><p>IOC的实现方式：IOC容器 （beanFactory）</p><p>单例 或多例 模式（scope 属性）</p><p>  ref 引用对象（对象是由Spring来创建的）</p><p>3种ioc来创建对象的方式</p><ol><li><p>无参构造   （property）</p></li><li><p>有参构造 (constructor-arg)</p><ul><li><p>beans.xml 中的constructor-arg 里的三种配置参数值</p><ul><li><p>根据参数下标  index</p></li><li><p>根据参数名称来设置   name</p></li><li><p>根据参数类型  type</p></li></ul></li></ul></li><li><p>通过工厂方法来创建对象</p><p>静态工厂    </p><p>​    实现方式：创建 factory包，编写factory.java类，类中实现 static newInstance（string  s）方法，return 对象</p><p> 配置bean 属性 id,class,factory-method</p><p>动态工厂</p><p>​    实现方式：静态方法的前提下删掉  static关键字</p><p> 配置bean 属性：<bean id="userFactory" class="..."></bean></p><bean id="user" factory-bean="userFactory" factory-method="newInstance"></bean></li></ol><h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a><strong>配置文件解析</strong></h2><p><alias>为bean设置别名 ，可设置多个  <alias name="xx" alias="xx_xx"> </alias></alias></p><p>id是bean的标识符 要唯一  如果没有配置id，name默认标识符；</p><p>如果配置id，又配置了name，那么name是别名 ； name可以设置多个别名 分隔符 可以是逗号，空格，分号           </p><p>class是bean的全限定名 = 包名+类名</p><p>如果不配置id和name 那么可以根据applicationContext.getBean（Class）获取对象</p><p>团队协作通过import来实现  <import resource="xx/xxx.xml">  导入配置文件</import></p><h2 id="依赖注入-denpendency-injection"><a href="#依赖注入-denpendency-injection" class="headerlink" title="依赖注入 denpendency injection"></a><strong>依赖注入</strong> denpendency injection</h2><p>依赖：指bean对象创建依赖于容器 。Bean对象的依赖资源</p><p>注入：指bean对象依赖的资源由容器来设置和装配</p><p>spring注入：</p><ol><li><p>构造器注入</p></li><li><p><strong>setter注入</strong></p><p>要求被注入的属性必须有set方法</p><ul><li><p>常量注入</p></li><li><p>bean注入</p></li><li><p>数组注入</p><pre><code>&lt;bean id = &quot;student&quot; class =&quot;com.zcf.dao.Student&quot;&gt;        //常量注入        &lt;property name=&quot;name&quot; value=&quot;ssss&quot;&gt;&lt;/property&gt;        //bean注入        &lt;property name=&quot;add&quot; ref=&quot;addr&quot;&gt;&lt;/property&gt;        //数组注入        &lt;property name=&quot;books&quot; &gt;            &lt;array&gt;                &lt;value&gt;sss&lt;/value&gt;                &lt;value&gt;sssss&lt;/value&gt;            &lt;/array&gt;        &lt;/property&gt;        &lt;/bean&gt;</code></pre></li></ul></li></ol><ul><li><p>list注入</p></li><li><p>Map注入 </p><ul><li>set注入</li></ul></li><li><p>null 注入 <property name>  <null>  </null></property></p></li><li><p>properties 注入 <props>  <prop key="xx"> xx</prop></props></p></li><li><p>p 命名空间注入</p></li></ul><p>bean的作用域： （scope）</p><ul><li><p>singleton 单例  整个容器中只有一个对象实例 default时默认singleton </p></li><li><p>prototype原型 每次获取bean都产生一个新的对象</p></li><li><p>request 每次请求时创建一个新的对象</p></li><li><p>session 在会话的范围内时一个对象</p></li><li><p>global session 只在portlet下有用，表示application</p></li><li><p>applicatio 在应用范围中一个对象</p><p><strong>在整合Struts2和spring时需要将action设为scope=“prototype”</strong></p></li></ul><p>autowire 自动装配  简化spring配置</p><p>​    no 不使用自动装配</p><p>​    byName 根据名称（set方法名来的）去查找相应的bean，如果有则装配上 </p><p>​    byType 根据类型自动装配，不用管bean的id，但是同一类型的bean只能有一个   慎用</p><p>​    constructor 当通过构造器注入 实例化bean时，适用byType的方式装配</p><p>​    配置全局的自动装配类型（autowire） 在头部配置 default-autowire = “xxx(byName)”</p><p>​    推荐不使用自动装配而使用 注释（annotation）</p><h2 id="静态代理："><a href="#静态代理：" class="headerlink" title="静态代理："></a>静态代理：</h2><ul><li>静态代理的角色分析：<ul><li>抽象角色—–一般使用接口或者抽象类来实现</li><li>真实角色—–被代理的角色</li><li>代理角色—–代理真实角色——代理真实角色后一般会做一些附属操作</li><li>客户 ——使用代理角色来进行一些操作</li></ul></li></ul><p>​        Rent.class (抽象角色)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>​        Host.class(真实角色)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房屋出租"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​        Proxy.class(代理角色)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span>  <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//租</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//看</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"带房客看房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//收中介费</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收取中介费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>​        Client.class(客户)</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Host host <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>            proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li>使用静态代理的好处：<ul><li>使得真实角色处理的业务更加纯粹，不再去关注一些公众的事情</li><li>公共的业务由代理完成—-实现业务的分工</li><li>公共业务发生扩展时变得更加集中于方便</li></ul></li></ul><ul><li>缺点<ul><li>类多了 —-多了代理类。工作量变大，开发效率降低了</li></ul></li></ul><h2 id="动态代理："><a href="#动态代理：" class="headerlink" title="动态代理："></a>动态代理：</h2><ul><li><p>动态代理和静态代理的角色是一样的</p></li><li><p>动态代理的代理类是动态生成的</p></li><li><p>分为两类 ：基于接口动态代和基于类的动态代理</p><ul><li>基于接口动态代理  —jdk动态代理</li><li>基于类的动态代理 —cglib</li></ul><p>现在<strong>Javassist</strong>来生成动态代理</p><p>动态代理的应用：Spring的AOP，加事务，加权限，加日志</p></li></ul><p>一个动态代理一般代理某一类业务</p><h2 id="AOP：面向切面编程-aspect-oriented-programming"><a href="#AOP：面向切面编程-aspect-oriented-programming" class="headerlink" title="AOP：面向切面编程   aspect oriented programming"></a><strong>AOP：</strong>面向切面编程   aspect oriented programming</h2><p> <strong>在不改变原有代码的情况下添加功能</strong></p><p>aop在Spring的作用：</p><ul><li><p>提供声明式服务（声明式事务）</p></li><li><p>允许用户实现自定义切面</p></li></ul><p>名词解释：</p><ul><li>关注点：增加的某个业务。如安全，异常处理，日志，缓存等；</li><li>切面：一个关注点的模块化</li><li>通知：在切面的某个特定的连接点上执行的动作</li><li>织入：把切面连接到其他的应用程序类型或对象上，并创建一个被通知的对象</li></ul><p>使用spring 实现aop</p><ul><li><p>通过SpringApi实现</p><p><strong>bean.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/aop                        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.service.impl.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.log.Log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.zcf.service.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre><code>注意：xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                        http://www.springframework.org/schema/aop                      **https://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;  **  ----》需设置Spring-aop.xsd本地的路径，否则包错：前缀 &quot;aop&quot; 未绑定</code></pre><p>   <strong>Log.class</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>MethodBeforeAdvice<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token keyword">implements</span> <span class="token class-name">MethodBeforeAdvice</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param method 被调用的方法对象     * @param args 被调用的方法的参数     * @param target 目标对象     * */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> Object target<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"方法被执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UserService.class</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>UserServiceImpl.class</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>zcf<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"更新用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span>  <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>AOP的重要性：</p><p>Spring-AOP就是将公共的业务（如日志，安全）和领域业务（领域模型）结合，当执行领域业务时将会把公共业务加进来。实现公共业务的重复利用，领域业务更纯粹。程序员专注于领域业务。其本质还是动态代理。</p></li><li><p>自定义类实现AOP</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Log.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----方法执行前----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----方法执行后----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--bean.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.service.impl.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.log.Log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.zcf.service.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span></code></pre><p>其余的类参考SpringAPI的实现AOP方法</p></li><li><p>使用注解实现AOP</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Log.class</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>After<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Around<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zcf.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----方法执行前----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zcf.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----方法执行后----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.zcf.service.impl.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint jp<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"签名："</span> <span class="token operator">+</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行目标方法</span>        Object result <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--bean.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.service.impl.UserServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.log.Log<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span></code></pre></li></ul><h2 id="Spring-整合Mybaties"><a href="#Spring-整合Mybaties" class="headerlink" title="Spring 整合Mybaties"></a>Spring 整合Mybaties</h2><h3 id="整合一"><a href="#整合一" class="headerlink" title="整合一"></a>整合一</h3><ul><li><p>导入相关jar包   </p></li><li><p>创建实体类 User</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserId</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>编写user.mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!-- 下面的语句不可省略 否则报错 文档根节点mapper必须匹配DOCTYPE根 为null--></span><span class="token doctype">&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.entity.user.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select * from student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写UserDao</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取用户列表</span><span class="token punctuation">}</span></code></pre><ul><li>编写UserDaoImpl</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SqlSessionTemplate sqlSession<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用setter注入sqlSession</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSession <span class="token operator">=</span> sqlSession<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.zcf.entity.user.mapper.selectUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>spring_mybatis 文件配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--下面的语句不可省略 否则报错  ,!DOCTYPE configuration的 configuration 对应根节点&lt;configuration>--></span><span class="token doctype">&lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--如果 不配置typeAliases ，则user.mapper.xml的 resultType必须为具体的包名+类名，若配置则可以 resultType=“类名”--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/zcf/entity/user.mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><ul><li><p>mybatis的<typeAliases>别名配置元素设置</typeAliases></p><ul><li><p>使用typeAlias </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span>   <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.**.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>此种方式的缺点就是每增加一个实体类都需要加上对应的类配置</p></li><li><p>使用package </p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.**.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>此种方式是扫描包下的类，使用<package>标签，表示扫描该包名下的所有类（除了接口和匿名内部类），如果类名上有注解，则使用注解指定的名称作为别名，如果没有则使用类名首字母小写作为别名，如com.XX.entity.User这个类如果没有设置@Alias注解，则此时会被关联到user这个别名上。</package></p></li></ul></li><li><p>编写beans.xml</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                   https://www.springframework.org/schema/beans/spring-beans.xsd <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    &lt;bean id= "dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/studdb?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        &lt;property name ="username" value="root" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置sqlsessionFactory 两个属性：dataSource和告诉数据库的配置文件的路径comfigLocation--></span>    &lt;bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring_mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    //UserDaoImpl类中有sqlSessionTemplate 成员变量，所以需要使用    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           &lt;property name="sqlSession" ref= "sqlSessionTemplate"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//test测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDao userDao <span class="token operator">=</span><span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取数据库表中的数据的大小</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="整合进阶二"><a href="#整合进阶二" class="headerlink" title="整合进阶二"></a>整合进阶二</h3><p>   使用最新的mybatis-spring整合时，在Spring配置文件中，不需要管理SQLSessionTemplate在Dao的实现，需要继承SQLSessionDaoSupport</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span> <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.zcf.entity.user.mapper.selectUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--将上面部分的beans.xml文件中的SQLSessionTemplate的bean删掉，将UserDao的属性改为sqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="整合进阶三"><a href="#整合进阶三" class="headerlink" title="整合进阶三"></a>整合进阶三</h3><p>mybatis使用注解</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//dao层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//service层</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//serviceImpl </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserMapper userMapper <span class="token operator">=</span> null<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserMapper</span><span class="token punctuation">(</span>UserMapper userMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userMapper <span class="token operator">=</span> userMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/aop                        https://www.springframework.org/schema/aop/spring-aop.xsd                            http://www.springframework.org/schema/tx                        https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    &lt;bean id= "dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/studdb?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        &lt;property name ="username" value="root" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置sqlsessionFactory --></span>    &lt;bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring_mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperInterface<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 更改mappers 的配置为package属性--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.entity<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span><span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="整合进阶四"><a href="#整合进阶四" class="headerlink" title="整合进阶四"></a>整合进阶四</h3><p>不需要mybatis配置文件</p><p>主要更改<property name="mapperLocations"> ：</property></p><pre><code> &lt;!-- 配置sqlsessionFactory --&gt;    &lt;bean id =&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/zcf/entity/*.mapper.xml&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;</code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务时<strong>正确执行</strong>一系列的操作或动作，使得数据库从一种转态转换成另一种状态，且保证操作<strong>全部成功</strong>，或<strong>全部失败</strong></p><p>原则：确保数据库操作的ACID特性</p><ol><li>原子性：不可分割性</li><li>一致性</li><li>隔离性  ：在事务提交之前，它可能的结果不应显示个任何其它事务</li><li>持久性：事务正确提交后，其结果将永久保存在数据库中</li></ol><p>事务类型：</p><ol><li>JDBC事务：用Connection对象控制，包括手动和自动模式</li><li>JTA事务：<strong>与实现无关的，与协议无关的API</strong></li><li>容器事务：应用服务器提供的，且大多是基于JA完成（通常基于JNDI的，相当复杂的API实现）</li></ol><p>​    差异：JDBC事务局限于<strong>一个数据库连接内</strong></p><p>​                JTA事务：功能强大，课跨越多个数据库或多Dao，使用比较复杂</p><p>​                容器事务：主要指J2EE应用服务器提供的事务管理，<strong>局限于EJB</strong></p><p><strong>事务的读取类型</strong>：</p><ol><li>脏读： 事务没提交，提前读取</li><li>不可重复读：两次读取的数据不一致</li><li>幻读：事务不是独立执行时发生的一种非预期现象</li></ol><p><strong>事务的隔离级别</strong>：定义一个事务可能受其他并发事务影响的程度</p><p><strong>事务的传播特性（行为）</strong>：当事务方法被被另一个事务方法调用是，必须指定事务如何传播      有7种</p><p><strong>事务是否只读</strong>：利用数据库事务的只读属性，进行特定优化处理</p><p>​      注意：不同的数据库厂商支持不同，例如Oracle的“readOnly”不起作用，不影响增删修查，而mysql则其作用</p><p> <strong>事务超时</strong>：事务的一个定时器，在特定时间内事务如果没有执行完毕，则会自动回滚</p><p> <strong>事务回滚</strong>：默认情况下，事务只有遇到运行期异常才会回滚，而在检查型异常不会</p><p>​    自定义回滚策略：</p><p> Spring事务状态</p><ul><li>事务接口：通过事务管理器过去TransactionStatus实例</li></ul><h3 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h3><p>实现方式：</p><ul><li><p>事务管理器（PlatformTransactionManager）方式</p><p>核心类：Spring事务管理的三个接口类以及JdbcTemplate类</p><p>实现步骤：获取事务管理器；创建事务属性对象；获取事务转态对象；</p><p>创建JDBC模板对象；业务数据操作处理；提交事务</p></li><li><p>模板事务（TransactionTemplate）方式   （Spring官方推荐）</p><p> 主要工具为JdbcTemplate类</p></li></ul><h3 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h3><p>主要在于在beans.xml添加声明式事务的配置，</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 本配置文件重点在于添加 tx的名称空间，配置声明式事务和aop配置 --></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/aop                        https://www.springframework.org/schema/aop/spring-aop.xsd                            http://www.springframework.org/schema/tx                        https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    &lt;bean id= "dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/studdb?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        &lt;property name ="username" value="root" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置sqlsessionFactory --></span>    &lt;bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring_mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 声明式事务 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    &lt;bean id ="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务通知 --></span>    &lt;tx:advice id ="txAdvice" transaction-manager="txManager">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置哪些方法使用什么样的事务，配置事务的传播特性 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.zcf.dao.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h2><p>创建动态网页项目，在WEB-INF下的lib导入相应的Spring，mybatis，struts2相关依赖包。</p><ul><li><p>编写web.xml (配置Spring ：contextConfigLocation,listener;配置Struts2 )</p><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 配置Spring --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 配置struts2 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>struts2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建相应的包文件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//entity  User.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--entity  user.mapper.xml --></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--mapper 标签的命名空间为 映射文件的包名+文件名去掉后缀 ；--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.entity.user.mapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//dao UserDao.java  对于Service和DAO类，基于SOA理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//dao UserDaoImpl</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">extends</span>  <span class="token class-name">SqlSessionDaoSupport</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"com.zcf.entity.user.mapper.getAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Service UserService</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Service UserServiceImpl</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span>  <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Action UserAction</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list <span class="token operator">=</span>userService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserService <span class="token function">getUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Application.xml 主要配置数据源，SQLSessionFactory，事务和aop，若需要引入资源，使用import  本文件配置的事务和AOP未起作用--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/aop                        https://www.springframework.org/schema/aop/spring-aop.xsd                            http://www.springframework.org/schema/tx                        https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    &lt;bean id= "dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/studdb?serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        &lt;property name ="username" value="root" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置sqlsessionFactory --></span>    &lt;bean id ="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;property name="configLocation" value="classpath:spring_mybatis.xml">&lt;/property>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:com/zcf/entity/*.mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 声明式事务 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    &lt;bean id ="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务通知 --></span>    &lt;tx:advice id ="txAdvice" transaction-manager="txManager">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置哪些方法使用什么样的事务，配置事务的传播特性 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remove*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.zcf.service.impl.*.*(..))<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:config/spring/user.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--config.spring 包下 user.xml 主要配置关于User的bean--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans                           https://www.springframework.org/schema/beans/spring-beans.xsd                            http://www.springframework.org/schema/aop                        https://www.springframework.org/schema/aop/spring-aop.xsd                            http://www.springframework.org/schema/tx                        https://www.springframework.org/schema/tx/spring-tx.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.dao.impl.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      &lt;property name ="sqlSessionFactory" ref="sqlSessionFactory"/>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zcf.service.impl.UserServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>&lt;bean id= "userAction" class= "com.zcf.action.UserAction">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--配置Struts.xml--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE struts PUBLIC          "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"          "http://struts.apache.org/dtds/struts-2.0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>struts</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span>  <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>struts-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userAction<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span><span class="token punctuation">></span></span>/list.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>package</span><span class="token punctuation">></span></span>&lt;/struts</code></pre><pre class=" language-jsp"><code class="language-jsp"><!--list.jsp  使用taglib prefix="c" 需要导入jstl.jar和standard.jar --><%@ page language="java" contentType="text/html; charset=utf-8"    pageEncoding="utf-8"%><%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>Insert title here</title></head><body>    <table width="80%" align="center">        <tr>            <td>编号</td>            <td>姓名</td>        </tr>        <c:forEach items="${list }" var="bean">        <tr>        <td>${bean.id }</td>        <td>${bean.name }</td>        </tr>        </c:forEach>    </table></body></html></code></pre></li></ul><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><ul><li><p>使用context</p></li><li><p>在xml文件添加<code>&lt;conext:component-scan base-package=&quot;com.zcf.*&quot;&gt;&lt;/conext:component-scan&gt;</code></p></li><li><p>在代码的适当位置添加注解  例如action类添加@Controller</p><p>Dao的实现类添加@Repository ，Service的实现类添加@Service</p><p>引用的成员变量使用@AutoWired </p><p><strong>注意</strong>：UserDao 需要引用SqlSessionFactory，在配置文件中未注入，所以这里通过setter方法注入</p><pre><code>//spring-mybatis 1.2不能在Dao层直接注入setSqlSessionFactory或sqlSessionTemplate，//解决：1. setter方法上添加@Autowire ；2. 在xml文件配置UserDao的配置</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSqlSessionFactory</span><span class="token punctuation">(</span>SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setSqlSessionFactory</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="点菜案例实现"><a href="#点菜案例实现" class="headerlink" title="点菜案例实现"></a>点菜案例实现</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>有三个表，分别是 menu（菜单），order（已点菜单）， orderdetail（已点菜单详情）</p><p>​    menu ：id，name ，price</p><p>​    order：id，deskId ，totalPrice</p><p>​    orderdetail ：id，orderId， menuId , num </p><p>功能需求：获取所有订单；根据订单号获取订单详情，删除订单详情的一项</p><p>订单详情示显示的信息有：编号，桌号，菜单名字，价格，数量，删除操作</p><p>报错：实体类找不到，映射文件的类型属性未写完整的包名+类名</p><p>对于映射文件的编写需要思考周全点。属性值尽量复制，能别手打就不要 手打。</p>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/posts/911124684/"/>
      <url>/posts/911124684/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>设计模式一般包含模式名称、问题、目的、解决方案、效果等组成要素，其中关键要素是模 式名称、问题、解决方案和效果。</p></li><li><p>GoF设计模式有23个 + 简单工厂模式</p></li><li><p>学习点</p><ul><li><p>设计模式的意图</p></li><li><p>解决什么问题，什么时候使用该设计模式</p></li><li><p>怎样解决</p></li><li><p>结构图</p></li><li><p>关键代码</p></li><li><p>应用实例</p><ul><li>生活中：</li><li>软件中：</li></ul></li><li><p>优点</p></li><li><p>缺点</p></li><li><p>注意事项</p></li></ul></li></ul><h2 id="面向对象原则"><a href="#面向对象原则" class="headerlink" title="面向对象原则"></a>面向对象原则</h2><h3 id="7种常用的面向对象原则："><a href="#7种常用的面向对象原则：" class="headerlink" title="7种常用的面向对象原则："></a>7种常用的面向对象原则：</h3><ol><li><p>单一职责原则(Single    Responsibility Principle,    SRP)一个类只负责一个功能领域中的相应职责 ★★★★☆</p></li><li><p>开闭原则    (Open-Closed    Principle,    OCP) 软件实体应对扩展开放，而对修改关闭 ★★★★★</p></li><li><p>里氏代换原则    (Liskov    Substitution Principle,    LSP) 所有引用基类对象的地方能够透明地使用 其子类的对象 ★★★★★</p></li><li><p>依赖倒转原则    (Dependence    Inversion Principle,    DIP) 抽象不应该依赖于细节，细节应该依赖于 抽象 ★★★★★ </p></li><li><p>接口隔离原则    (Interface    Segregation Principle,    ISP) 使用多个专门的接口，而不使用单一的总 接口 ★★☆☆☆ </p></li><li><p>合成复用原则    (Composite    Reuse Principle,    CRP) 尽量使用对象组合，而不是继承来达到复 用的目的 ★★★★☆ </p></li><li><p>迪米特法则    (Law    of    Demeter,    LoD) 一个软件实体应当尽可能少地与其他实体 发生相互作用 ★★★☆☆</p></li></ol><h2 id="六个创建型模式"><a href="#六个创建型模式" class="headerlink" title="六个创建型模式"></a>六个创建型模式</h2><h3 id="简单工厂模式："><a href="#简单工厂模式：" class="headerlink" title="简单工厂模式："></a>简单工厂模式：</h3><p>​              简单工厂模式的要点在于：当你需要什么，只<strong>需要传入一个正确的参数</strong>，就可以获取你所需要的对象，而<strong>无须知道其创建细节</strong>。其<strong>核心是工厂类的设计</strong></p><ul><li><p>设计模式的意图:</p></li><li><p><strong>对简单工厂模式的意图,利用* .properties等属性文件进行类的对应工作.实现无须重新编译代码.即可完成工厂类的选择生成具体类的工作,减少了工厂类与具体需要生成类的耦合性.</strong></p></li><li><p>解决什么问题，什么时候使用该设计模式</p><ul><li>解决只能通过new关键字创建对象，降低与客户端类的耦合度；是对象的创建与对象的使用分离（不分离—》可能违反开闭原则）；降低该类对象创建时的代码重复；提高对象创建的效率；</li></ul></li><li><p>怎样解决</p><ul><li>将需要创建的各种不同对象（例如各种不同的Chart对象）的相关代码封装到不同的类 中，这些类称为<strong>具体产品类</strong>，而将它们公共的代码进行抽象和提取后封装在一个<strong>抽象产品类</strong> 中，每一个<strong>具体产品类都是抽象产品类的子类</strong>；然后<strong>提供一个工厂类用于创建各种产品</strong>，在 工厂类中提供一个创建产品的工厂方法，该方法可以<strong>根据所传入的参数不同创建不同的具体 产品对象</strong>；<strong>客户端</strong>只需<strong>调用工厂类的工厂方法并传入相应的参数</strong>即可得到一个产品对象</li></ul></li><li><p>结构图</p><ul><li><img src="https://shapefire.github.io/posts/911124684/simpleFactoryConstructionImg.PNG" alt="simpleFactoryConstruction"></li></ul></li><li><p>Factory（工厂角色）：工厂角色即工厂类，它是简单工厂模式的核心，负责实现创建所有产 品实例的内部逻辑；工厂类可以被外界直接调用，创建所需的产品对象；在工厂类中提供了<br>静态的工厂方法factoryMethod()，它的返回类型为抽象产品类型Product。</p><ul><li>Product（抽象产品角色）：它是工厂类所创建的所有对象的父类，封装了各种产品对象的 公有方法，它的引入将提高系统的灵活性，使得在工厂类中只需定义一个通用的工厂方法， 因为所有创建的具体产品对象都是其子类对象。</li><li>ConcreteProduct（具体产品角色）：它是简单工厂模式的创建目标，所有被创建的对象都充 当这个角色的某个具体类的实例。每一个具体产品角色都继承了抽象产品角色，需要实现在 抽象产品中声明的抽象方法。</li></ul></li><li><p>关键代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span>    <span class="token class-name">Product</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//所有产品类的公共业务方法                        </span>    <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">methodSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//公共方法的实现                        </span>    <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//声明抽象业务方法    </span>    <span class="token keyword">public</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span>    <span class="token function">methodDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>在具体产品类中实现了抽象产品类中声明的抽象业务方法，不同的具体产品类可以提供不同 的实现，典型的具体产品类代码如下所示：<span class="token keyword">class</span>    <span class="token class-name">ConcreteProduct</span>    <span class="token keyword">extends</span>    <span class="token class-name">Product</span>    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//实现业务方法                        </span>    <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">methodDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">//业务方法的实现                        </span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">class</span>    <span class="token class-name">Factory</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//静态工厂方法                        </span>    <span class="token keyword">public</span>    <span class="token keyword">static</span>    Product    <span class="token function">getProduct</span><span class="token punctuation">(</span>String    arg<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                        Product    product    <span class="token operator">=</span>    null<span class="token punctuation">;</span>                                                <span class="token keyword">if</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                                    product    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//初始化设置product    </span>          <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span>    <span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                                        product    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token punctuation">}</span>                                            <span class="token keyword">return</span>    product<span class="token punctuation">;</span>                                <span class="token punctuation">}</span>         <span class="token punctuation">}</span> 在客户端代码中，我们通过调用工厂类的工厂方法即可得到产品对象，典型代码如下所示：<span class="token keyword">class</span>    <span class="token class-name">Client</span>    <span class="token punctuation">{</span>                        <span class="token keyword">public</span>    <span class="token keyword">static</span>    <span class="token keyword">void</span>    <span class="token function">main</span><span class="token punctuation">(</span>String    args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                Product    product<span class="token punctuation">;</span>                                            product    <span class="token operator">=</span>    Factory<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过工厂类创建产品对象                        product.methodSame();        </span>        product<span class="token punctuation">.</span><span class="token function">methodDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre></li><li><p>简化简化简单工厂模式：将<strong>抽象产品类和工厂类合并</strong>，将静态工厂方法移至抽象产品类中</p></li></ul><ul><li><p>应用场景</p></li><li><p>优点</p><ul><li>工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以 免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分 离</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可， 对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类， 在一定程度上提高了系统的灵活性</li></ul></li><li><p>缺点</p><ul><li>由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受 到影响。</li><li>使用简单工厂模式势必会增加系统中类的个数（引入了新的工厂类），增加了系统的复杂 度和理解难度。</li><li>系统扩展困难（不灵活），一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成 工厂逻辑过于复杂，不利于系统的扩展和维护。</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li><li><strong>最大缺点：</strong>当有新产品要加入到系统中时，必须修改工厂类，需要在其中加入必要的业务逻辑， 这违背了“开闭原则”。 ————》<strong>工厂方法模式解决</strong></li></ul></li><li><p>注意事项</p><ul><li>在以下情况下可以考虑使用简单工厂模式：<br>(1)<strong>工厂类负责创建的对象比较少</strong>，由于创建的对象较少，不会造成工厂方法中的业务逻辑太 过复杂。<br>(2)客户端<strong>只知道传入工厂类的参数</strong>，对于如何创建对象并不关心。</li></ul></li></ul><ul><li><p>练习：使用简单工厂模式设计一个可以创建不同几何形状（如圆形、方形和三角形等）的绘图 工具，每个几何图形都具有绘制draw()和擦除erase()两个方法，要求在绘制不支持的几何 图形时，提示一个UnSupportedShapeException。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DrawShape</span><span class="token punctuation">{</span>      <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCircle</span> <span class="token keyword">implements</span> <span class="token class-name">DrawShape</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制圆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"擦除圆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawRectangle</span> <span class="token keyword">implements</span> <span class="token class-name">DrawShape</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绘制矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"擦除矩形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//没有异常处理的ShapeFactory类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DrawShape <span class="token function">getShape</span><span class="token punctuation">(</span>String shapeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DrawShape drawShape <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            drawShape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeName<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            drawShape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawRectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> drawShape<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*这两个类可替代上面的没有异常处理的ShapeFactory类//有UnSupportedShapeException异常处理的ShapeFactory类public class ShapeFactory {    public static DrawShape getShape(String shapeName) throws UnSupportedShapeException {        DrawShape drawShape = null;        if (shapeName.equalsIgnoreCase("circle")) {            drawShape = new DrawCircle();        } else if (shapeName.equalsIgnoreCase("rectangle")) {            drawShape = new DrawRectangle();        } else            throw new UnSupportedShapeException();        return drawShape;    }//自定义UnSupportedShapeException异常类public class UnSupportedShapeException extends Exception {    public UnSupportedShapeException() {        // TODO Auto-generated constructor stub        super();    }    public String toString() {        // TODO Auto-generated method stub        return "不支持该图形！！";    }}*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        DrawShape drawShape<span class="token punctuation">;</span>        drawShape <span class="token operator">=</span> ShapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        drawShape<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p>  使用配置文件：（在客户端创建具体形状对象时，每更换一个Chart对象都需要修改客户 端代码中静态工厂方法的参数，客户端代码将要重新编译，这对于客户端而言，违反了“开闭原则”）</p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//config.xml</span>  <span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span>  <span class="token operator">&lt;</span>config<span class="token operator">></span>  <span class="token operator">&lt;</span>shapeName<span class="token operator">></span>rectangle<span class="token operator">&lt;</span><span class="token operator">/</span>shapeName<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>config<span class="token operator">></span>  <span class="token comment" spellcheck="true">//注意导入的包名称</span>  <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span>  <span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span>  <span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 从配置文件中提取形状名称，返回shapeName</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getShapeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 创建文件对象</span>              DocumentBuilderFactory dFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              DocumentBuilder builder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Document document<span class="token punctuation">;</span>              document <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"lib/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 获取文本节点</span>              NodeList nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"shapeName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              Node classNode <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              String shapeName <span class="token operator">=</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> shapeName<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// TODO: handle exception</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//测试</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DrawShape drawShape<span class="token punctuation">;</span>          String shapeName <span class="token operator">=</span>XMLUtil<span class="token punctuation">.</span><span class="token function">getShapeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          drawShape <span class="token operator">=</span> ShapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span>shapeName<span class="token punctuation">)</span><span class="token punctuation">;</span>          drawShape<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><strong>工厂模式</strong></h3><ul><li><p>设计模式的意图</p><ul><li>简单工厂存在一个严重的问题，当需要引入新产品时，由于静态工厂方法通过传入的参数来创建不同的产品，这必定需要修改工厂类的代码，违背了“开闭原则”</li><li>简单工厂模式中，所有的产品都由同一个工厂创建，工厂类职责较重，业务逻辑较为复杂，具体产品与工厂类之间的耦合度高，严重影响了系统的灵活性 和扩展性，而工厂方法模式则可以很好地解决这一问题</li></ul></li><li><p>解决什么问题，什么时候使用该设计模式</p><ul><li><p>封装一些类对象的初始化过程，<strong>初始化工作较为复杂</strong>，例如需要初始化其他相关的类，还有可能需要读取配置文件（例如连接数据库或创建文件），导致代码较长，如果将它们都写在构造函数中，会导致构造函数庞大，不利于代码的修改和维护；</p></li><li><p>需要提供一种灵活的方式来选择<strong>对象</strong>（例如日志记录器），尽量<strong>不修改源代码的情况下</strong>更换或增加 <strong>对象的方法</strong>（日志记录方式）</p><p><strong>实例</strong>：如何封装记录器的初始化过程并保证多种记录器切换的灵活性</p></li></ul></li><li><p>怎样解决</p><ul><li>一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。工厂方法模式又简称为工厂模式 (Factory    Pattern)，又可称作虚拟构造器模式(Virtual Constructor    Pattern)或多态工厂模式 (Polymorphic    Factory    Pattern)。工厂方法模式是一种类创建型模式。</li><li>工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的产品对象，而是针对不同 的产品提供不同的工厂，系统提供一个与产品等级结构对应的工厂等级结构。</li></ul></li><li><p>结构图</p><ul><li><img src="https://shapefire.github.io/posts/911124684/FactoryModelConstructionImg.PNG" alt="FactoryModelConstruction"></li><li>Product（抽象产品）：它是定义产品的接口，是工厂方法模式所创建对象的超类型，也就是产品对象的公共父类。</li></ul></li><li><p>ConcreteProduct（具体产品）：它实现了抽象产品接口，某种类型的具体产品由专门的具体 工厂创建，具体工厂和具体产品之间一一对应。</p><ul><li>ConcreteFactory（具体工厂）：它是抽象工厂类的子类，实现了抽象工厂中定义的工厂方 法，并可由客户端调用，返回一个具体产品类的实例</li></ul></li><li><p>关键代码</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//与简单工厂模式相比，工厂方法模式最重要的区别是引入了抽象工厂角色，抽象工厂可以是 接口，也可以是抽象类或者具体类</span><span class="token keyword">interface</span>    <span class="token class-name">Factory</span>    <span class="token punctuation">{</span>                <span class="token keyword">public</span>    Product    <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在抽象工厂中声明了工厂方法但并未实现工厂方法，具体产品对象的创建由其子类负责</span><span class="token keyword">class</span>    <span class="token class-name">ConcreteFactory</span>    <span class="token keyword">implements</span>    <span class="token class-name">Factory</span>    <span class="token punctuation">{</span>                <span class="token keyword">public</span>    Product    <span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">return</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在客户端代码中，只需关心工厂类即可，不同的具体工厂可以创建不同的产品，典型的客户 端类代码片段如下所示：</span>……        Factory    factory<span class="token punctuation">;</span>    factory    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//可通过配置文件实现    </span>Product    product<span class="token punctuation">;</span>        product    <span class="token operator">=</span>    factory<span class="token punctuation">.</span><span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ……</code></pre></li></ul></li></ul><ul><li><p>应用实例</p><ul><li>生活中：</li><li>软件中：</li></ul></li><li><p>优点</p><ul><li>工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节，用户<strong>只需要关心所需产品对应的工厂</strong>，无须关心创建细节，甚至无须知道具体产品类的类名</li><li><strong>基于工厂角色和产品角色的多态性设计</strong>是工厂方法模式的<strong>关键</strong>。它能够让工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部。工厂方法模 式之所以又被称为多态工厂模式，就正是因为所有的具体工厂类都具有同一抽象父类。</li><li>在系统中加入新产品时<strong>，无须修改</strong>抽象工厂和抽象产品 提供的接口，无须修改客户端，也无须修改其他的具体工厂和具体产品，而<strong>只要添加</strong>一个具体工厂和具体产品就可以了,完全符合开闭原则</li></ul></li><li><p>缺点</p><ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上<strong>增加了系统的复杂度</strong>，有更多的类需要编译和运行， 会给系统带来一些额外的开销。</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，<strong>增加了系统的抽象性和理解难度</strong>，且在实现时可能需要用到DOM、反射等技术，<strong>系统的实现难度增加</strong>。</li></ul></li><li><p>注意事项</p><ul><li><p>在以下情况下可以考虑使用工厂方法模式：</p><ol><li><strong>客户端不知道它所需要的对象的类</strong>。在工厂方法模式中，客户端不需要知道具体产品类的 类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建，可将具体工厂类 的类名存储在配置文件或数据库中</li><li><strong>抽象工厂类通过其子类来指定创建哪个对象</strong>。在工厂方法模式中，对于抽象工厂类只需要 提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和 里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li></ol></li><li><p>有人说：可以在客户端代码中直接通过反射机制来生成产品对象，在定义产品对象时使用抽 象类型，同样可以确保系统的灵活性和可扩展性，增加新的具体产品类无须修改源代码，只 需要将其作为抽象产品类的子类再修改配置文件即可，根本不需要抽象工厂类和具体工厂 类。<br>试思考这种做法的可行性？如果可行，这种做法是否存在问题？为什么</p><p><strong>A: 不行</strong>，<strong>工厂的作用除了将对象的创建和对象的使用分离之外，还有一个作用就是可以屏蔽一些对象初始化的工作，如果直接反射得到具体产品对象，那么反射之后，需要每次做初始化工作，而工厂中就直接初始化完成了。反射生成对象只能适用一些最简单的情况，如果对象的创建比较复杂，例如要调用有参的构造函数，创建之前需要配置相应的环境，则需要将这些代码封装到工厂中，而工厂的作用不仅仅是简单的创建一个对象</strong></p></li></ul></li><li><p>练习：使用工厂方法模式设计一个程序来读取各种不同类型的图片格式，针对每一种图片格式都设 计一个图片读取器，如GIF图片读取器用于读取GIF格式的图片、JPG图片读取器用于读取JPG 格式的图片。需充分考虑系统的灵活性和可扩展性。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ReadImg.class</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReadImg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//GifReadImg.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GifReadImg</span> <span class="token keyword">implements</span> <span class="token class-name">ReadImg</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取Gif格式的图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//JpgReadImg.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpgReadImg</span> <span class="token keyword">implements</span> <span class="token class-name">ReadImg</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取Jpg格式的图片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ReadImgFactory.class</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReadImgFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ReadImg <span class="token function">createReadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//GifReadImgFactory.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GifReadImgFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ReadImgFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ReadImg <span class="token function">createReadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ReadImg gifReadImg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GifReadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> gifReadImg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//JpgReadImgFactory.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpgReadImgFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ReadImgFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ReadImg <span class="token function">createReadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        ReadImg jpgReadImg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JpgReadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jpgReadImg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//XMLUtil.class</span><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getImgType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory documentBuilderFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder documentBuilder <span class="token operator">=</span> documentBuilderFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document document <span class="token operator">=</span> documentBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"lib/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"imgType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String className <span class="token operator">=</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用Class.forName()方法创建实例必须是类的全路径否则提示ClassNotFound错误</span>            Class <span class="token class-name">cName</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.designModel.factoryModel."</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object object <span class="token operator">=</span> cName<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">//config.xml<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imgType</span><span class="token punctuation">></span></span>GifReadImgFactory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imgType</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Client.class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token comment" spellcheck="true">/* 未使用配置文件         * ReadImgFactory readImgFactory; ReadImg readImg; readImgFactory = new         * JpgReadImgFactory(); readImg = readImgFactory.createReadImg();         * readImg.readImg();         */</span>        ReadImgFactory readImgFactory<span class="token punctuation">;</span>        ReadImg readImg<span class="token punctuation">;</span>        readImgFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ReadImgFactory<span class="token punctuation">)</span> XMLUtil<span class="token punctuation">.</span><span class="token function">getImgType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readImg <span class="token operator">=</span> readImgFactory<span class="token punctuation">.</span><span class="token function">createReadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readImg<span class="token punctuation">.</span><span class="token function">readImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><ul><li><p>设计模式的意图</p><ul><li>由 于工厂方法模式中的每个工厂只生产一类产品，可能会导致系统中存在大量的工厂类，势必会增加系统的开销</li><li>抽象工厂的基本思想：<strong>考虑将一些相关的产品组成一个“产品族”，由同一个工厂来统一生产</strong></li><li>两个重要概念：<ul><li>产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔 电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等 级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li><li>产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中 的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品 等级结构中，海尔电冰箱位于电冰箱产品等级结构中，海尔电视机、海尔电冰箱构成了一个 产品族。</li><li><img src="https://shapefire.github.io/posts/911124684/produceLevel.PNG" alt="produceLevel"></li><li>抽象工厂模式与工厂方法模式<strong>最大的区别</strong>：工厂方法模式针对的是一个产品等级结构，而抽象工厂模式需要面对多个产品等级结构，一 个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建。</li><li>抽象工厂模式是工厂方法模式的进一步延伸，由于它提供了功能更为强大的工厂类并且具备 较好的可扩展性，在软件开发中得以广泛应用，尤其是在<strong>一些框架和API类库的设计</strong>中</li></ul></li></ul></li><li><p>解决什么问题，什么时候使用该设计模式</p><ul><li>在工厂模式的前提下：增加新的功能时，需要增加大量的类，针对每一个新增具体功能都需要增加一个具体工厂，类的个数成对增加，这无疑会导致系统越来越庞大增加系统的维护成本和运行开销</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。例如在界面皮肤系统中，有多种不同的皮肤风格（产品族）例如黑色风格，白色风格，每种颜色所拥有的的对应组件都是一个产品族。</li><li><strong>当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结 构、属于不同类型的具体产品时就可以使用抽象工厂模式</strong></li></ul></li><li><p>怎样解决</p><ul><li>抽象工厂模式中 的具体工厂<strong>不只是</strong>创建一种产品，它负责创建<strong>一族</strong>产品</li><li>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，它是一种对象创建型模式</li></ul></li><li><p>结构图</p><ul><li><img src="/posts/911124684/abstractFactoryConstructionImg.PNG" alt="abstractFactoryConstruction"></li><li>​    AbstractFactory（抽象工厂）：它声明了一组用于创建一族产品的方法，每一个方法对应一 种产品</li><li>​    ConcreteFactory（具体工厂）：它实现了在抽象工厂中声明的创建产品的方法，生成一组具 体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中</li><li>AbstractProduct（抽象产品）：它为每种产品声明接口，在抽象产品中声明了产品所具有的 业务方法</li><li>ConcreteProduct（具体产品）：它定义具体工厂生产的具体产品对象，实现抽象产品接口中 声明的业务方法</li></ul></li><li><p>关键代码</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象工厂中声明了多个工厂方法，用于创建不同类型的产品，抽象工厂可以是接口，也可以是抽象类或者具体类</span><span class="token keyword">abstract</span>    <span class="token keyword">class</span>    <span class="token class-name">AbstractFactory</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有多少个产品（产品等级）就需要多少个产品工厂</span>    <span class="token keyword">public</span>    <span class="token keyword">abstract</span>    AbstractProductA    <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工厂方法一    </span>    <span class="token keyword">public</span>    <span class="token keyword">abstract</span>    AbstractProductB    <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//工厂方法二    </span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//具体工厂实现了抽象工厂，每一个具体的工厂方法可以返回一个特定的产品对象，而同一个 具体工厂所创建的产品对象构成了一个产品族。</span><span class="token keyword">class</span>    <span class="token class-name">ConcreteFactory1</span>    <span class="token keyword">extends</span>    <span class="token class-name">AbstractFactory</span>    <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//工厂方法一        </span>    <span class="token keyword">public</span>    AbstractProductA    <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                <span class="token keyword">return</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteProductA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//工厂方法二        </span>    <span class="token keyword">public</span>    AbstractProductB    <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                        <span class="token keyword">return</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteProductB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><ul><li><p>应用实例</p><ul><li>生活中：</li><li>软件中：</li></ul></li><li><p>优点</p><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产 品族中的对象</li><li>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</li></ul></li><li><p>缺点</p><ul><li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码， 这显然会带来较大的不便，违背了“开闭原则”。</li></ul></li><li><p>开闭原则的倾斜性</p></li><li><p>抽象工厂模式存在“开闭原则”的倾斜性，它以一种倾斜的方式来满足“开闭原则”，为增 加新产品族提供方便，但不能为增加新产品结构提供这样的方便</p></li><li><p>注意事项</p><ul><li><p>适用场景：</p><ul><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。可以通过配置文件等方式来 使得用户可以动态改变产品族，也可以很方便地增加新的产品族。</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。同一个 产品族中的产品可以是没有任何关系的对象，但是它们都具有一些共同的约束，如同一操作 系统下的按钮和文本框，按钮与文本框之间没有直接关系，但它们都是属于某一操作系统 的，此时具有一个共同的约束条件：操作系统的类型。</li><li>产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的 产品等级结构。</li></ul></li><li><p><strong>使用抽象工厂模式时，必须确定产品的等级结构，否则添加一个新的产品等级将极大的麻烦。</strong></p></li></ul></li><li><p>练习：Sunny软件公司欲推出一款新的手机游戏软件，该软件能够支持Symbian、Android和 Windows    Mobile等多个智能手机操作系统平台，针对不同的手机操作系统，该游戏软件提 供了不同的游戏操作控制(OperationController)类和游戏界面控制(InterfaceController)类， 并提供相应的工厂类来封装这些类的初始化过程。软件要求具有较好的扩展性以支持新 的操作系统平台，为了满足上述需求，试采用抽象工厂模式对其进行设计</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//interfaceController 界面控制接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidInterfaceController</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Andoid系统的界面控制初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbianInterfaceController</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Symbian系统的界面控制初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsMobileInterfaceController</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WindowsMobile系统的界面控制初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//OperationController 操作控制接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OperationController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidOperationController</span> <span class="token keyword">implements</span> <span class="token class-name">OperationController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Android系统的操作控制初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbianOperationController</span> <span class="token keyword">implements</span> <span class="token class-name">OperationController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Symbian系统的操作控制初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsMobileOperationController</span> <span class="token keyword">implements</span> <span class="token class-name">OperationController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WindowsMobile系统的操作控制初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建界面控制对象</span>    <span class="token keyword">public</span> InterfaceController <span class="token function">createInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建操作控制对象</span>    <span class="token keyword">public</span> OperationController <span class="token function">createOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> InterfaceController <span class="token function">createInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> OperationController <span class="token function">createOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbianFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> InterfaceController <span class="token function">createInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymbianInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> OperationController <span class="token function">createOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymbianOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SymbianFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> InterfaceController <span class="token function">createInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymbianInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> OperationController <span class="token function">createOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymbianOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getSystemType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory documentBuilderFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder documentBuilder <span class="token operator">=</span> documentBuilderFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document document <span class="token operator">=</span> documentBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"lib/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"systemType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String className <span class="token operator">=</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cName <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.designPattern.abstractFactory.factory."</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object object <span class="token operator">=</span> cName<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 无XML文件配置          * IFactory iFactory; OperationController operationController;         * InterfaceController interfaceController; iFactory = new         * WindowsMobileFactory(); operationController =         * iFactory.createOperationController(); interfaceController =         * iFactory.createInterfaceController(); operationController.initOperation();         * interfaceController.initInterface();         */</span>        IFactory iFactory<span class="token punctuation">;</span>        OperationController operationController<span class="token punctuation">;</span>        InterfaceController interfaceController<span class="token punctuation">;</span>        iFactory <span class="token operator">=</span> <span class="token punctuation">(</span>IFactory<span class="token punctuation">)</span> XMLUtil<span class="token punctuation">.</span><span class="token function">getSystemType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operationController <span class="token operator">=</span> iFactory<span class="token punctuation">.</span><span class="token function">createOperationController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interfaceController <span class="token operator">=</span> iFactory<span class="token punctuation">.</span><span class="token function">createInterfaceController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operationController<span class="token punctuation">.</span><span class="token function">initOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interfaceController<span class="token punctuation">.</span><span class="token function">initInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><pre class=" language-xml"><code class="language-xml">  <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemType</span><span class="token punctuation">></span></span>WindowsMobileFactory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemType</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span></code></pre><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li><p>设计模式的意图</p><ul><li><p>对于一个软件系统的某些类而言，无须创建多个实例；例如Windows的任务管理器</p></li><li><p>为了节约系统资源</p></li><li><p>解决什么问题，什么时候使用该设计模式</p><ul><li>需要确保系统中某 个类只有唯一一个实例</li><li>确保对象的唯一性</li></ul></li><li><p>怎样解决</p></li><li><p>通过如下三步来对该类进行设计：</p><ul><li><p>确保实例的唯一性，需要禁止类的外部直接使用new来创建对象，因此需要将<strong>构造函数的可见性</strong>设置为<strong>private</strong></p></li><li><p>在类中创建并保存唯一实例，为了让外界可以访问这个唯一实例，需要在类中定义一个静态的类对象类型的私有成员变量 。例如：在User 类中定义静态的User类型的私有成员变量；</p><p>​       private static User user = null；</p></li><li><p>增加一个<strong>公有的静态方法</strong>用来在其他类中使用和实例化该私有的成员变量；</p><p>代码示例：获取 private static User user；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> User <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>三个要点：</p><ul><li>某个类<strong>只能</strong>有一个实例</li><li>必须自行创建这个实例</li><li>必须自行向整个系统提供这个实例</li></ul></li></ul></li></ul></li><li><p>结构图</p><p><img src="/posts/911124684/singletonConstructionImg.PNG" alt="singletonConstruction"></p><ul><li>Singleton（单例）：在单例类的内部实现只生成一个实例，同时它提供一个静态的 getInstance()工厂方法，让客户可以访问它的唯一实例；为了防止在外部对其实例化，将其构 造函数设计为私有；在单例类内部定义了一个Singleton类型的静态对象，作为外部共享的唯一 实例</li></ul></li><li><p>关键代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Singleton</span>    <span class="token punctuation">{</span>                       <span class="token keyword">private</span>    <span class="token keyword">static</span>    Singleton singleton <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">private</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>               <span class="token keyword">public</span>    <span class="token keyword">static</span>    Singleton    <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>sintleton <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                  singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                     <span class="token punctuation">}</span></code></pre></li></ul><h4 id="单例类的两种不同的实现方式："><a href="#单例类的两种不同的实现方式：" class="headerlink" title="单例类的两种不同的实现方式："></a>单例类的两种不同的实现方式：</h4><h5 id="饿汉式单例：实现最简单的单例类"><a href="#饿汉式单例：实现最简单的单例类" class="headerlink" title="饿汉式单例：实现最简单的单例类"></a>饿汉式单例：实现最简单的单例类</h5><ul><li><p>结构图：</p><p><img src="/posts/911124684/eagerSingletonConstruction.PNG" alt="eagerSingletonConstruction"></p><p>在定义静态变量的时候实例化单例类，因此在<strong>类加载的时候</strong>就已经创建了单例对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EagerSingleton</span>    <span class="token punctuation">{</span>                            <span class="token keyword">private</span>    <span class="token keyword">static</span>    <span class="token keyword">final</span>    EagerSingleton    instance    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">private</span>    <span class="token function">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>               <span class="token keyword">public</span>    <span class="token keyword">static</span>    EagerSingleton    <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">return</span>    instance<span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                     <span class="token punctuation">}</span></code></pre><p>当<strong>类被加载</strong>时，静态变量instance会被初始化，此时类的私有构造函数会被调用，单例类的唯 一实例将被创建</p></li></ul><h5 id="懒汉式单例类与线程锁定"><a href="#懒汉式单例类与线程锁定" class="headerlink" title="懒汉式单例类与线程锁定"></a>懒汉式单例类与线程锁定</h5><ul><li><p>结构图</p><p><img src="/posts/911124684/lazySingletonConstruction.PNG" alt="lazySingletonConstruction"></p><p>懒汉式单例在第一次调用getInstance()方法时实例化，在类加载时并不自 行实例化，这种技术又称为<strong>延迟加载(Lazy    Load)技术</strong>，即<strong>需要的时候再加载实例</strong>，为了避免多个线程同时调用getInstance()方法，使用关键字<strong>synchronized</strong></p><ul><li><p><strong>延迟加载技术</strong>（Lazy Load）</p><p>延迟加载，可以简单理解为，只有在使用的时候才会执行相关操作</p><ul><li>用途： 网页中的图片加载 ，hibernate的数据库查询等等</li></ul></li><li><p>关键字 <strong>synchronized</strong></p><ul><li><p>为什么使用：并发编程中存在<strong>线程安全问题</strong>，主要原因有：1.存在共享数据    2.多线程共同操作共享数据</p></li><li><p>作用：synchronized可以保证<strong>在同一时刻</strong>，<strong>只有一个线程</strong>可以执行某个方法或某个代码块，同时synchronized可以<strong>保证一个线程的变化可见</strong>（可见性），即可以代替volatile  （synchronize 是java总解决并发问题的一种最常用最简单的方法，确保线程互斥的访问同步）</p></li><li><p>应用方式：</p></li><li><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ol><li>普通同步方法（实例方法），锁是当前实例对象 ，进入同步代码前要获得当前实例的锁</li><li>静态同步方法，锁是当前类的class对象 ，进入同步代码前要获得当前类对象的锁</li><li>同步方法块，锁是括号里面的对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁</li></ol></li></ul></li><li><p>关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>    <span class="token class-name">LazySingleton</span>    <span class="token punctuation">{</span>                                <span class="token keyword">private</span>    <span class="token keyword">static</span>    LazySingleton    instance    <span class="token operator">=</span>    null<span class="token punctuation">;</span>        <span class="token keyword">private</span>    <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>                <span class="token keyword">synchronized</span>    <span class="token keyword">public</span>    <span class="token keyword">static</span>    LazySingleton    <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                                    <span class="token keyword">if</span>    <span class="token punctuation">(</span>instance    <span class="token operator">==</span>    null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                    instance    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                                                               <span class="token keyword">return</span>    instance<span class="token punctuation">;</span>                                 <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>上述代码运行时，每次调用getInstance()时 都需要进行<strong>线程锁定判断</strong>，在多线程高并发访问环境中，将会导致<strong>系统性能大大降低</strong>。</p><p>改进：将synchornate关键字作用于 instance    =    new    LazySingleton()字句中也会出现产生多个单例对象，所以需要利用双重检查锁定的方式实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>    <span class="token class-name">LazySingleton</span>    <span class="token punctuation">{</span>                                <span class="token keyword">private</span>    <span class="token keyword">volatile</span>    <span class="token keyword">static</span>    LazySingleton    instance    <span class="token operator">=</span>    null<span class="token punctuation">;</span>                <span class="token keyword">private</span>    <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>                <span class="token keyword">public</span>    <span class="token keyword">static</span>    LazySingleton    <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//第一重判断    </span>        <span class="token keyword">if</span>    <span class="token punctuation">(</span>instance    <span class="token operator">==</span>    null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//锁定代码块    </span>            <span class="token keyword">synchronized</span>    <span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第二重判断        </span>                <span class="token keyword">if</span>    <span class="token punctuation">(</span>instance    <span class="token operator">==</span>    null<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                    instance    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建单例实例</span>                <span class="token punctuation">}</span>                                                        <span class="token punctuation">}</span>                                            <span class="token punctuation">}</span>                                            <span class="token keyword">return</span>    instance<span class="token punctuation">;</span>                                <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用双重检查锁定来实现懒汉式单例类，需要在静态成员变量instance之前增加<strong>修饰符volatile</strong>,被volatile修饰的成员变量可以确保多个线程都能够正确处理，且该代 码只能在JDK1.5及以上版本中才能正确执行。</p></li><li><p>使使用双重检查锁定来实现单例模式也<strong>不是一种完美的实现方式</strong>，因为volatile关键字会<strong>屏蔽</strong>Java虚拟机所做的一 些<strong>代码优化</strong>，可能会导致系统运行<strong>效率降低</strong></p></li><li><p>两种单例模式比较：</p><ol><li>饿汉式单例类无须考虑多线程访问问题</li><li>懒汉式单例无须一直占用系统资源，但是必须处理多个线程同时访问的问题</li><li>在调用速度和反应时间角度：饿汉 优于 懒汉</li><li>从资源利用效率角度：懒汉 优于 饿汉</li></ol></li></ul></li></ul><h5 id="更好的单例实现方法（Initialization-Demand-Holder-（IoDH）技术）："><a href="#更好的单例实现方法（Initialization-Demand-Holder-（IoDH）技术）：" class="headerlink" title="更好的单例实现方法（Initialization Demand Holder （IoDH）技术）："></a>更好的单例实现方法（Initialization Demand Holder （IoDH）技术）：</h5><ul><li><p>饿汉式单例类不能实现延迟加载，不管将来用不用始终占据内存；懒汉式单例类线程安全控 制烦琐，而且性能受影响，IoDH技术能将两种单例的缺点克服，将优点合而为一</p></li><li><p>关键代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在单例类中增加一个静态(static)内部类，在该内部类中创建单例对象，再将 该单例对象通过getInstance()方法返回给外部使用，</span><span class="token keyword">class</span>    <span class="token class-name">Singleton</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span>    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>  <span class="token punctuation">}</span>            <span class="token keyword">private</span>    <span class="token keyword">static</span>    <span class="token keyword">class</span>    <span class="token class-name">HolderClass</span>    <span class="token punctuation">{</span>                                <span class="token keyword">private</span>    <span class="token keyword">final</span>    <span class="token keyword">static</span>    Singleton    instance    <span class="token operator">=</span>    <span class="token keyword">new</span>        <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">public</span>    <span class="token keyword">static</span>    Singleton    <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                        <span class="token keyword">return</span>    HolderClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>            <span class="token keyword">public</span>    <span class="token keyword">static</span>    <span class="token keyword">void</span>    <span class="token function">main</span><span class="token punctuation">(</span>String    args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                        Singleton    s1<span class="token punctuation">,</span>    s2<span class="token punctuation">;</span>                                                s1    <span class="token operator">=</span>    Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                s2    <span class="token operator">=</span>    Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>通过使用IoDH，我们既可以实现延迟加载，又可以保证线程安全，不影响系统性能。<strong>缺点：是与编程语言本身的特性相关，很多面向对象 语言不支持IoDH</strong></p></li></ul><ul><li><p>应用实例</p><ul><li>生活中：</li><li>软件中：</li></ul></li><li><p>优点</p><ul><li><p>单例模式提供了对<strong>唯一实例的受控访问</strong>。因为单例类封装了它的唯一实例，所以它可以严 格控制客户怎样以及何时访问它。</p></li><li><p>由于在系统内存中<strong>只存在一个对象</strong>，因此可以节约系统资源，对于一些需要频繁创建和销 毁的对象单例模式无疑可以提高系统的性能。</p></li><li><p><strong>允许可变数目的实例</strong>。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获 得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问 题。</p></li></ul></li><li><p>缺点</p><ul><li>由于单例模式中没有抽象层，因此单例类的<strong>扩展有很大的困难</strong></li><li>单例类的<strong>职责过重</strong>，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角 色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的 本身的功能融合到一起。</li><li>现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次 利用时又将重新实例化，这将导致<strong>共享的单例对象状态的丢失</strong></li></ul></li><li><p>注意事项</p><ul><li>系统只需要一个实例对象象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者 需要考虑资源消耗太大而只允许创建一个对象。</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途 径访问该实例</li></ul></li><li><p>练习：分别使用饿汉式单例、带双重检查锁定机制的懒汉式单例以及IoDH技术实现负载均衡器 LoadBalancer。</p><ul><li><p>饿汉式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//负载均衡器类，充当单例角色  饿汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EagerSingletonLoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有静态成员变量，存储唯一实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> EagerSingletonLoadBalancer instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EagerSingletonLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务器集合</span>    <span class="token keyword">private</span> List serverList <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有构造函数</span>    <span class="token keyword">private</span> <span class="token function">EagerSingletonLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 公有静态成员方法，返回唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EagerSingletonLoadBalancer <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 增加服务器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServer</span><span class="token punctuation">(</span>String server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除服务器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeServer</span><span class="token punctuation">(</span>String server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用Random类随机获取服务器</span>    <span class="token keyword">public</span> String <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>serverList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> serverList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>带双重检查锁定机制的懒汉式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//负载均衡器类，充当单例角色  带双重检查锁定的懒汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingletonLoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有静态成员变量，存储唯一实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingletonLoadBalancer instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务器集合</span>    <span class="token keyword">private</span> List serverList <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有构造函数</span>    <span class="token keyword">private</span> <span class="token function">LazySingletonLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 公有静态成员方法，返回唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingletonLoadBalancer <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazySingletonLoadBalancer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingletonLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 增加服务器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServer</span><span class="token punctuation">(</span>String server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除服务器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeServer</span><span class="token punctuation">(</span>String server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用Random类随机获取服务器</span>    <span class="token keyword">public</span> String <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>serverList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> serverList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>IoDH技术实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//负载均衡器类，充当单例角色 IoDH技术实现的单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IoDHSingletonLoadBalancer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// HolderClass static内部类 , 在内部类中创建单例对象 IoDHSingletonLoadBalancer</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HolderClass</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> IoDHSingletonLoadBalancer instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IoDHSingletonLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List serverList <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有构造函数</span>    <span class="token keyword">private</span> <span class="token function">IoDHSingletonLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 公有静态成员方法，返回唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IoDHSingletonLoadBalancer <span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> HolderClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 增加服务器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addServer</span><span class="token punctuation">(</span>String server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除服务器</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeServer</span><span class="token punctuation">(</span>String server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        serverList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用Random类随机获取服务器</span>    <span class="token keyword">public</span> String <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>serverList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> serverList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>客户端测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端测试类  以懒汉式单例为模板</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建4个LoadBalancer对象</span>        LazySingletonLoadBalancer balancer1<span class="token punctuation">,</span> balancer2<span class="token punctuation">,</span> balancer3<span class="token punctuation">,</span> balancer4<span class="token punctuation">;</span>        balancer1 <span class="token operator">=</span> LazySingletonLoadBalancer<span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balancer2 <span class="token operator">=</span> LazySingletonLoadBalancer<span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balancer3 <span class="token operator">=</span> LazySingletonLoadBalancer<span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balancer4 <span class="token operator">=</span> LazySingletonLoadBalancer<span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断服务器负载均衡器是否相同</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>balancer1 <span class="token operator">==</span> balancer2 <span class="token operator">&amp;&amp;</span> balancer2 <span class="token operator">==</span> balancer3 <span class="token operator">&amp;&amp;</span> balancer3 <span class="token operator">==</span> balancer4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(lazySingleton)服务器负载均衡器具有唯一性！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 增加服务器</span>        balancer1<span class="token punctuation">.</span><span class="token function">addServer</span><span class="token punctuation">(</span><span class="token string">"Server 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balancer1<span class="token punctuation">.</span><span class="token function">addServer</span><span class="token punctuation">(</span><span class="token string">"Server 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balancer1<span class="token punctuation">.</span><span class="token function">addServer</span><span class="token punctuation">(</span><span class="token string">"Server 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        balancer1<span class="token punctuation">.</span><span class="token function">addServer</span><span class="token punctuation">(</span><span class="token string">"Server 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟客户端请求的分发，如果输出结果全为同一个server，可以将i适当放大，</span>        <span class="token comment" spellcheck="true">// 例如改为"i &lt; 100"</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String server <span class="token operator">=</span> balancer1<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分发请求至服务器： "</span> <span class="token operator">+</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul><li><p>设计模式的意图</p><ul><li>在面向对象系统中实现对<strong>已有的对象</strong>进行复制和粘贴</li></ul></li><li><p>解决什么问题，什么时候使用该设计模式</p><ul><li>将已有的对象保存为模板</li><li>在创建对象时能够复制已有对象的模板进行生成</li></ul></li><li><p>怎样解决</p><ul><li>首先创建一个原型对象，再通过复制这个原型对象来创建更多的<strong>同类型的对象</strong></li><li>原型模式(Prototype Pattern)：使用原型实例指定创建对象的种类，并且通过拷贝这些 原型创建新的对象。原型模式是一种<strong>对象创建型模式</strong>。</li><li>原型模式是一种“另类”的创建型模式，创建克隆对象的工厂就是原型类自身，工厂方法由<strong>克隆方法</strong>来实现。</li><li>是通过克隆方法所创建的对象是<strong>全新的对象</strong>，它们在内存中拥有新的地址，通常 对克隆所产生的对象进行修改对原型对象不会造成任何影响，每一个克隆对象都是<strong>相互独立</strong>的。</li></ul></li><li><p>结构图</p><p><img src="/posts/911124684/prototypeConstructionImg.PNG" alt="prototypeConstruction"></p><p>Prototype（抽象原型类）：它是声明克隆方法的接口，是所有具体原型类的公共父类，可以 是抽象类也可以是接口，甚至还可以是具体实现类</p><p>ConcretePrototype（具体原型类）：它实现在抽象原型类中声明的克隆方法，在克隆方法中 返回自己的一个克隆对象。</p><p>Client（客户类）：让一个原型对象克隆自身从而创建一个新的对象，在客户类中<strong>只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象</strong>。由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。</p></li><li><p>关键代码</p><ul><li><p>通用实现方法：在具体原型类的克隆方法中实例化一个与自身类型相同的对象并将其返回，并将相关的参数传入新创建的对象中，保证它们的成员属性相同</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>    <span class="token class-name">ConcretePrototype</span>    <span class="token keyword">implements</span>    <span class="token class-name">Prototype</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>    String attr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//成员属性</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAttr</span><span class="token punctuation">(</span>String    attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attr    <span class="token operator">=</span>    attr<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> String <span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>attr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> Prototype <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//克隆方法 </span>    <span class="token punctuation">{</span>                        Prototype prototype    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//创建新对象        </span>        prototype<span class="token punctuation">.</span><span class="token function">setAttr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span>    prototype<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//在客户类中我们只需要创建一个ConcretePrototype对象作为原型对象，然后调用其clone()方法 即可得到对应的克隆对象，如下代码所示：</span>Prototype    obj1 <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> obj1<span class="token punctuation">.</span><span class="token function">setAttr</span><span class="token punctuation">(</span><span class="token string">"Sunny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Prototype    obj2 <span class="token operator">=</span>    obj1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种方法可作为原型模式的<strong>通用实现</strong>，它与编程语言特性无关，任何面向对象语言都可以使用这种形式来实现对原型的克隆。</p></li><li><p>java语言提供的clone()方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实现克隆的Java类必须实现一个标识接口Cloneable,若没有实现该接口，则会报CloneNotSupportedException 异常</span><span class="token keyword">class</span>    <span class="token class-name">ConcretePrototype</span>    <span class="token keyword">implements</span>        <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    ……     <span class="token keyword">public</span>    Prototype    <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Object    object    <span class="token operator">=</span>    null<span class="token punctuation">;</span>     <span class="token keyword">try</span>    <span class="token punctuation">{</span> 　　　    object    <span class="token operator">=</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span>    <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span>    exception<span class="token punctuation">)</span>    <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Not    support    cloneable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 　    <span class="token punctuation">}</span> 　　    <span class="token keyword">return</span>    <span class="token punctuation">(</span>Prototype    <span class="token punctuation">)</span>object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     …… <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端创建原型对象和克隆对象</span>Prototype    obj1    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Prototypeobj2 <span class="token operator">=</span>    obj1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>java语言的clone()方法满足：克隆和原型对象不是同一个，两者类型一样，</p><p>若对象的x的equals方法定义恰当，则x.clone().equals(x);</p></li><li><p>为了获取对象的一份拷贝，直接利用Object类的clone()方法，具体步骤如下：</p><ol><li>在派生类中覆盖基类的clone()方法，并声明为public；</li><li>在派生类的clone()方法中，调用super.clone()；</li><li>派生类需实现Cloneable接口。</li></ol></li></ul></li></ul></li></ul><h4 id="两种不同的克隆方法"><a href="#两种不同的克隆方法" class="headerlink" title="两种不同的克隆方法"></a>两种不同的克隆方法</h4><p> 浅克隆和深克隆 </p><p>​    主要区别：是否支持引用类型的成员变量的复制（String类型是引用类型）</p><h5 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h5><p>  在浅克隆中，当对象被复制时<strong>只复制它本身</strong>和其中包含的<strong>值类型的成员变量</strong>，而<strong>引用类型的成员对象并没有复制</strong></p><p>例子说明：User类中有一个Address类型的成员变量，当user_previous 的对象进行浅克隆生成user_new对象时，比较user_previous == user_new  的输出结果为false，user_previous.getAddress() == user_new.getAddress() 的输出结果为true，说明 两个User对象的Address对象为同一个对象，内存地址相同，所以进行浅克隆时引用类型的成员变量并没有进行复制。</p><h5 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h5><p>  在深克隆中，除了对象本身被复制外，对象所<strong>包含的所有成员变量也将复制</strong></p><pre><code>  java语言实现深克隆可以通过**序列化等方式**实现。</code></pre><p>​     序列化：序列化就是<strong>将对象写到流的过程</strong>，写到流中的对象是原有对象的一个拷贝，而原对象仍然存在于内存中。通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此 通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。</p><p>​    注意点：能 够实现序列化的对象其类<strong>必须</strong>实现<strong>Serializable接口</strong></p><p>​    核心代码：重写clone方法，不再使用java自带的克隆机制</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> WeeklyLog <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>    IOException<span class="token punctuation">,</span>ClassNotFoundExceptio<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将对象写入流中</span>    ByteArrayOutputStream    bao<span class="token operator">=</span><span class="token keyword">new</span>    <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ObjectOutputStream    oos<span class="token operator">=</span><span class="token keyword">new</span>    <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">)</span><span class="token punctuation">;</span>    oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将对象从流中取出</span>    ByteArrayInputStream bis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">.</span>toByteArr        ObjectInputStream    ois<span class="token operator">=</span><span class="token keyword">new</span>        <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>WeeklyLog<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> </code></pre><ul><li><p>原型管理器</p><p>原型管理器(Prototype    Manager)是<strong>将多个原型对象存储在一个集合中</strong>供客户端使用，它是一个 专门负责克隆对象的工厂，其中定义了一个集合用于存储原型对象，如果需要某个原型对象的一个克隆，可以通过复制集合中对应的原型对象来获得。在原型管理器中<strong>针对抽象原型类</strong>进行编程，以便扩展。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//原型管理器（使用饿汉式单例实现） 确保系统中有且仅有一个 PrototypeManager对象，有利于节省系统资源，并可以更好地对原型管理器对象进行控制</span><span class="token keyword">class</span>        <span class="token class-name">PrototypeManager</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义一个Hashtable，使用“键值对”存储原型对象客户端可以通过Key来获取对应原型对象的克隆对象</span>    <span class="token keyword">private</span>    Hashtable    ht<span class="token operator">=</span><span class="token keyword">new</span>    <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>    <span class="token keyword">static</span>    PrototypeManager pm    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为Hashtable增加公文对象    </span>    <span class="token keyword">private</span>        <span class="token function">PrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>    ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"far"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FAR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"srs"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SRS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//增加新的公文对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOfficialDocument</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span>OfficialDocument    doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过浅克隆获取新的公文对象    </span>     <span class="token keyword">public</span>    OfficialDocument <span class="token function">getOfficialDocument</span><span class="token punctuation">(</span>String    key<span class="token punctuation">)</span>            <span class="token punctuation">{</span>               <span class="token keyword">return</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>OfficialDocument<span class="token punctuation">)</span>ht<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//返回一个原型管理器</span>      <span class="token keyword">public</span> <span class="token keyword">static</span>    PrototypeManager <span class="token function">getPrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">return</span>    pm<span class="token punctuation">;</span>                              <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    User user_pervious <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setSclass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中心街"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user_new <span class="token operator">=</span> user_pervious<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_new <span class="token operator">==</span> user_pervious<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>深克隆</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 用户类 * @param name * @param sclass * @param address * @method clone 深克隆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sclass<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Address <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sclass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSclass</span><span class="token punctuation">(</span>String sclass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sclass <span class="token operator">=</span> sclass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用序列化技术实现</span>    <span class="token keyword">public</span> User <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将对象写入流中</span>        ByteArrayOutputStream bao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream ooStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">)</span><span class="token punctuation">;</span>        ooStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象从流中取出</span>        ByteArrayInputStream byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream oiStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> oiStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        User user_pervious <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user_new <span class="token operator">=</span> null<span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setSclass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中心街"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            user_new <span class="token operator">=</span> user_pervious<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_new <span class="token operator">==</span> user_pervious<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><ul><li><p>应用实例</p><ul><li>生活中：</li><li>软件中：</li></ul></li><li><p>优点</p><ul><li>当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过复制一个 已有实例可以<strong>提高新实例的创建效率</strong>。</li><li><strong>扩展性较好，由于在原型模式中提供了抽象原型类，</strong>在客户端可以针对抽象原型类进行编 程，而将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响。</li><li>原型模式<strong>提供了简化的创建结构，</strong>工厂方法模式常常需要有一个与产品类等级结构相同的工厂等级结构，而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无须专门的工厂类来创建产品。</li></ul></li><li><p>缺点</p><ul><li>需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进行改造时，需要修改源代码，违背了“开闭原则”。</li><li>实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了 实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦</li></ul></li><li><p>注意事项</p><ul><li>创建新对象成本较大（如初始化需要占用较长的时间，占用太多的CPU资源或网络资 源），新的对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对其成员变量稍作修改。</li><li>如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占用内存较少时，可 以使用原型模式配合备忘录模式来实现。</li><li>需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的 几个组合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。</li></ul></li><li><p>练习：设计并实现一个用户类Customer，其中包含一个名为客户地址的成员变量，客户地址的类型为Address，用浅克隆和深克隆分别实现User对象的复制并比较这两种克隆方式的异同</p><p>浅克隆：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 用户类 * @param name * @param sclass * @param address * @method clone 浅克隆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sclass<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Address <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sclass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSclass</span><span class="token punctuation">(</span>String sclass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sclass <span class="token operator">=</span> sclass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            object <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持复制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        User user_pervious <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user_pervious<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setSclass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中心街"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user_new <span class="token operator">=</span> user_pervious<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_new <span class="token operator">==</span> user_pervious<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>深克隆</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 用户类 * @param name * @param sclass * @param address * @method clone 深克隆 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sclass<span class="token punctuation">;</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span>    <span class="token keyword">public</span> Address <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sclass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSclass</span><span class="token punctuation">(</span>String sclass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sclass <span class="token operator">=</span> sclass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用序列化技术实现</span>    <span class="token keyword">public</span> User <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将对象写入流中</span>        ByteArrayOutputStream bao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream ooStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">)</span><span class="token punctuation">;</span>        ooStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将对象从流中取出</span>        ByteArrayInputStream byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream oiStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>byteArrayInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> oiStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        User user_pervious <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user_new <span class="token operator">=</span> null<span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setSclass</span><span class="token punctuation">(</span><span class="token string">"一班"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"中心街"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user_pervious<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            user_new <span class="token operator">=</span> user_pervious<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_new <span class="token operator">==</span> user_pervious<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user_pervious<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> user_new<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出为false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通用实现prototype模式</p><p>一份个人的简历克隆成多份，简历信息包括了个人信息和工作经验;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>designPattern<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>currencyClone<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author Fan * */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Resume</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String timeArea<span class="token punctuation">;</span>    <span class="token keyword">private</span> String company<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Resume <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置个人信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPersonalInfo</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置工作经验</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWorkExperience</span><span class="token punctuation">(</span>String timeArea<span class="token punctuation">,</span> String company<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 显示</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工作经验: "</span> <span class="token operator">+</span> timeArea <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> company<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTimeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> timeArea<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTimeArea</span><span class="token punctuation">(</span>String timeArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeArea <span class="token operator">=</span> timeArea<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> company<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompany</span><span class="token punctuation">(</span>String company<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>company <span class="token operator">=</span> company<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteResume</span> <span class="token keyword">extends</span> <span class="token class-name">Resume</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Resume <span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Resume resume <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resume<span class="token punctuation">.</span><span class="token function">setPersonalInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resume<span class="token punctuation">.</span><span class="token function">setWorkExperience</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTimeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCompany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> resume<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resume resume1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resume1<span class="token punctuation">.</span><span class="token function">setPersonalInfo</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resume1<span class="token punctuation">.</span><span class="token function">setWorkExperience</span><span class="token punctuation">(</span><span class="token string">"2014-2019"</span><span class="token punctuation">,</span> <span class="token string">"深圳腾讯股份有限公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Resume resume2 <span class="token operator">=</span> resume1<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resume1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resume2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resume1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resume2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*输出内容：最后打印的两行信息说明不是同一个对象张三  男  26工作经验: 2014-2019 深圳腾讯股份有限公司张三  男  26工作经验: 2014-2019 深圳腾讯股份有限公司com.designPattern.prototype.currencyClone.ConcreteResume@15db9742com.designPattern.prototype.currencyClone.ConcreteResume@6d06d69c*/</span></code></pre></li></ul><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ul><li><p>设计模式的意图</p><p>如何将一个由<strong>多个部件组装</strong>的物品组装起来并返回用户。建造者模式为客户端返回的<strong>不是</strong>一个简单的产品，<strong>而是一个由多个部件组成的复杂产品</strong>。</p></li><li><p>解决什么问题，什么时候使用该设计模式</p><p>将<strong>客户端</strong>与包含多个组成部分（或部件）的复杂对象的<strong>创建过程</strong>分离，客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需 建造者的类型即可。</p><p>例如：游戏角色是一个复杂对象，它包含性别、脸型等多个组 成部分，不同的游戏角色其组成部分有所差异，无论是何种造型的游戏角色，它的<strong>创建步骤都大同小异</strong>，都需要<strong>逐步创建</strong>其组成部分，再将各<strong>组成部分</strong>装配成<strong>一个完整</strong>的游戏角色。</p></li><li><p>怎样解决</p><p>关注如何一步一步创建一个的复杂对象，不同的具体建造者定义了不同的创建过程，且具体建造者相互独立，增加新的建造者非常方便，无须修改已有代码，系统具有较好的扩展性。</p><p>建造者模式的定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可 以创建不同的表示。建造者模式是一种对象创建型模式。</p></li><li><p>结构图</p><p><img src="/posts/911124684/builderConstructionImg.PNG" alt="builderConstruction"></p><p>Builder（抽象建造者）：它为创建一个产品Product对象的各个部件指定抽象接口，在该接 口中一般声明两类方法，<strong>一类方法是buildPartX()</strong>，它们用于创建复杂对象的各个部件；<strong>另一 类方法是getResult()</strong>，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口</p><p>ConcreteBuilder（具体建造者）：它实现了Builder接口，<strong>实现各个部件的具体构造和装配方法</strong>，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</p><p>Product（产品角色）：它是<strong>被构建的复杂对象</strong>，包含多个组成部件，具体建造者创建该产品 的内部表示并定义它的装配过程。</p><p>Director（指挥者）：指挥者又称为导演类，它<strong>负责安排复杂对象的建造次序</strong>，指挥者与抽 象建造者之间存在关联关系，可以在<strong>其construct()建造方法中调用建造者对象的部件构造与装配方法</strong>，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建 造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥 者类的构造函数或者Setter方法将该对象传入指挥者类中</p></li><li><p>关键代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//复杂对象类</span>    <span class="token keyword">class</span>    <span class="token class-name">Product</span>        <span class="token punctuation">{</span>                                <span class="token keyword">private</span>        String    partA<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义部件，部件可以是任意类型，包括值类型和引用类型</span>    <span class="token keyword">private</span>        String    partB<span class="token punctuation">;</span>    <span class="token keyword">private</span>        String    partC<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//partA的Getter方法和Setter方法省略    </span>    <span class="token comment" spellcheck="true">//partB的Getter方法和Setter方法省略    </span>    <span class="token comment" spellcheck="true">//partC的Getter方法和Setter方法省略</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象建造者类中定义了产品的创建方法和返回方法，</span><span class="token keyword">abstract</span>    <span class="token keyword">class</span>    <span class="token class-name">Builder</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建产品对象                        </span>    <span class="token keyword">protected</span> Product    product<span class="token operator">=</span><span class="token keyword">new</span>    <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>    <span class="token keyword">abstract</span>    <span class="token keyword">void</span>    <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">public</span>    <span class="token keyword">abstract</span>    <span class="token keyword">void</span>    <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">public</span>    <span class="token keyword">abstract</span>    <span class="token keyword">void</span>    <span class="token function">buildPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回产品对象</span>    <span class="token keyword">public</span>    Product    <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                        <span class="token keyword">return</span> product<span class="token punctuation">;</span>                                <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指挥者类Director</span><span class="token keyword">class</span>    <span class="token class-name">Director</span>    <span class="token punctuation">{</span>    <span class="token keyword">private</span>    Builder    builder<span class="token punctuation">;</span>    <span class="token keyword">public</span>    <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token operator">=</span>builder<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>    <span class="token keyword">public</span>    <span class="token keyword">void</span> <span class="token function">setBuilder</span><span class="token punctuation">(</span>Builder    builder<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token operator">=</span>builer<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//产品构建与组装方法                </span>    <span class="token keyword">public</span>    Product    <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token keyword">return</span>    builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Director类主要有两个作用：一方面它<strong>隔离 了客户与创建过程</strong>；另一方面它<strong>控制产品的创建过程</strong>，包括某个buildPartX()方法是否被调用 以及多个buildPartX()方法调用的先后次序等。</p><p>指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对 象。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//客户端</span>…… Builder        builder    <span class="token operator">=</span>    <span class="token keyword">new</span>    <span class="token class-name">ConcreteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可通过配置文件实现</span>Director    director    <span class="token operator">=</span>    <span class="token keyword">new</span>        <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>Product    product    <span class="token operator">=</span>    director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>……</code></pre></li><li><p>对于Director的进一步讨论</p><p>1.省略Director，将Director与抽象建造者Builder合并，在Builder 中提供逐步构建复杂产品对象的construct()方法，直接在construct() 方法中调用buildPartX()方法。</p><p>​     注意：  对Director类的省略方式都不影响系统的灵活性和可扩展性，同时还简化了系统结 构，但加重了抽象建造者类的职责，如果construct()方法较为复杂，待构建产品的组成部分较 多，建议还是将construct()方法单独封装在Director中，这样做更符合“单一职责原则”。</p><p>2.钩子方法的引入</p><p>建造者模式可以通过Director类来更加<strong>精细地控制产品的创建过程</strong>，例如增加一类称之为钩子方法(HookMethod)的特殊方法来控制是否对某个 buildPartX()的调用。</p><p>钩子方法的返回类型通常为boolean类型，方法名一般为isXXX()，钩子方法定义在<strong>抽象建造者类</strong>（Builder类）中</p><p>通过引入钩子方 法，我们可以在Director中对复杂产品的构建进行精细的控制，不仅指定buildPartX()方法的执行顺序，还可以控制是否需要执行某个buildPartX()方法。</p></li><li><p>应用实例</p><ul><li>生活中：一辆汽车的组装  ，套餐的组合</li><li>软件中：游戏角色的模型的创建</li></ul></li><li><p>优点</p><ul><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解 耦，使得相同的创建过程可以创建不同的产品对象</li><li>​    每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体 建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。由于 指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方 便，符合“开闭原则”</li><li>更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得 创建过程更加清晰，也更方便使用程序来控制创建过程</li></ul></li><li><p>缺点</p><ul><li>建造者模式所创建的产品一般具有较多的<strong>共同点</strong>，其<strong>组成部分相似</strong>，如果产品之间的<strong>差异性很大</strong>，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的 限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致 系统变得很庞大，增加系统的理解难度和运行成本。</li></ul></li><li><p>注意事项</p><ul><li><p>需要生成的产品对象有复杂的内部结构，这些产品对象通常<strong>包含多个成员属性</strong>。</p></li><li><p>需要生成的产品对象的属性相互依赖，<strong>需要指定其生成顺序</strong>。</p></li><li><p>对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过 程封装在指挥者类中，而不在建造者类和客户类中。</p></li><li><p>隔离复杂对象的创建和使用，并使得<strong>相同的创建过程</strong>可以创建<strong>不同的产品</strong>。</p></li></ul></li><li><p>练习：Sunny软件公司欲开发一个视频播放软件，为了给用户使用提供方便，该播放软件提供多种界面显示模式，如完整模式、精简模式、记忆模式、网络模式等。在不同的显示模式 下主界面的组成元素有所差异，如在完整模式下将显示菜单、播放列表、主窗口、控制条等，在精简模式下只显示主窗口和控制条，而在记忆模式下将显示主窗口、控制条、 收藏列表等。尝试使用建造者模式设计该软件。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 主窗口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainWindows</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示主窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 菜单显示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MenuView</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示主菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 播放列表 */</span><span class="token keyword">class</span> <span class="token class-name">PlayList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示播放列表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 控制条 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControlBar</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示控制条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 收藏列表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示收藏列表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 视频播放软件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoPlayer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MenuView menuView<span class="token punctuation">;</span>    <span class="token keyword">private</span> MainWindows mainWindows<span class="token punctuation">;</span>    <span class="token keyword">private</span> PlayList playList<span class="token punctuation">;</span>    <span class="token keyword">private</span> ControlBar controlBar<span class="token punctuation">;</span>    <span class="token keyword">private</span> CollectList collectList<span class="token punctuation">;</span>    <span class="token keyword">public</span> CollectList <span class="token function">getCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> collectList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCollectList</span><span class="token punctuation">(</span>CollectList collectList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collectList <span class="token operator">=</span> collectList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> MenuView <span class="token function">getMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> menuView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMenuView</span><span class="token punctuation">(</span>MenuView menuView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>menuView <span class="token operator">=</span> menuView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> MainWindows <span class="token function">getMainView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mainWindows<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMainView</span><span class="token punctuation">(</span>MainWindows mainView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainWindows <span class="token operator">=</span> mainView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> PlayList <span class="token function">getPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> playList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPlayList</span><span class="token punctuation">(</span>PlayList playList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>playList <span class="token operator">=</span> playList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ControlBar <span class="token function">getControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> controlBar<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setControlBar</span><span class="token punctuation">(</span>ControlBar controlBar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>controlBar <span class="token operator">=</span> controlBar<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 视频播放build */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">VideoPlayerBuild</span> <span class="token punctuation">{</span>    VideoPlayer videoPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildMainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> VideoPlayer <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildMainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> videoPlayer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">isMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">isPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">isCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 完整模式 *将所有组件显示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompleteVideoPlayerBuild</span> <span class="token keyword">extends</span> <span class="token class-name">VideoPlayerBuild</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setMainView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setMenuView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setPlayList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setControlBar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setCollectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 精简模式 * 只显示 主窗口和控制条 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleVideoPlayerBuild</span> <span class="token keyword">extends</span> <span class="token class-name">VideoPlayerBuild</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setMainView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setMenuView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setPlayList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setControlBar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setCollectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Fan 记忆模式 *显示 主窗口 ，控制条和收藏列表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryVideoPlayerBuild</span> <span class="token keyword">extends</span> <span class="token class-name">VideoPlayerBuild</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setMainView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MainWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setMenuView</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setPlayList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setControlBar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ControlBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        videoPlayer<span class="token punctuation">.</span><span class="token function">setCollectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isMenuView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isPlayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Boolean <span class="token function">isCollectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建DOM文档对象</span>            DocumentBuilderFactory dFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder builder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document doc<span class="token punctuation">;</span>            doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src//com//designPattern//build//config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取包含类名的文本结点</span>            NodeList nl <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cName <span class="token operator">=</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 通过类名生成实例对象并将其返回</span>            Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">></span></span>com.designPattern.build.MemoryVideoPlayerBuild<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        VideoPlayerBuild videoPlayerBuild<span class="token punctuation">;</span>        videoPlayerBuild <span class="token operator">=</span> <span class="token punctuation">(</span>VideoPlayerBuild<span class="token punctuation">)</span> XMLUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VideoPlayer videoPlayer <span class="token operator">=</span> videoPlayerBuild<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="七个结构型模式"><a href="#七个结构型模式" class="headerlink" title="七个结构型模式"></a>七个结构型模式</h2><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul><li><p>意图： 解决不兼容结构问题 ；通过增加一个类似于电源适配器一样的适配器角色，协调两个原本不兼容的结构。</p></li><li><p>概述：将一个接口转换成客户希望的另一个接口，使接口不兼容的那 些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p></li><li><p>适配器的实现 ：把客户类的请求转化为对适配者的相应接口的调用。</p><p>简单的说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类<strong>并不直接</strong>访问适配者类。因此， 适配器让那些由于接口不兼容而不能交互的类可以一起工作。</p></li></ul><p>适配器分为对象适配器和类适配器</p><h4 id="对象适配器（常用）"><a href="#对象适配器（常用）" class="headerlink" title="对象适配器（常用）"></a>对象适配器（常用）</h4><p>​    适配器与适配者之间是<strong>关联关系</strong></p><pre><code>-  Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以 是具体类。-  Adapter（适配器类）：适配器可以调用另一个接口，作为一个**转换器**，对Adaptee和Target进行适配，适配器类是适配器模式的**核心**，在对象适配器中，它通过**继承Target**并**关联**一个 Adaptee对象使二者产生联系。-  Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是**一个具体类**，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</code></pre><p>关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>    <span class="token class-name">Adapter</span>    <span class="token keyword">extends</span>    <span class="token class-name">Target</span>    <span class="token punctuation">{</span>    <span class="token keyword">private</span>    Adaptee    adaptee<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//维持一个对适配者对象的引用        </span>    <span class="token keyword">public</span>    <span class="token function">Adapter</span><span class="token punctuation">(</span>Adaptee    adaptee<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee<span class="token operator">=</span>adaptee<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token keyword">public</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转发调用                    }</span>    <span class="token punctuation">}</span></code></pre><p>优点：</p><ul><li>一个对象适配器可以把多个不同的适配者适配到同一个目标</li><li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可通过该适配器进行适配。</li></ul><p>缺点：</p><ul><li>与类适配器模式相比，要在适配器中置换适配者类的某些方法比较麻烦。如果一定要置换掉 适配者类的一个或多个方法，可以先做一个适配者类的子类，将适配者类的方法置换掉，然 后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</li></ul><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p>适配器与适配者之间是<strong>继承关系</strong></p><p>根据类适配器模式结构图，适配器类<strong>实现</strong>了抽象目标类接口Target，并<strong>继承</strong>适配者类，在 配器类的request()方法中调用所继承的适配者类的specificRequest()方法，实现了适配</p><p>关键代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>    <span class="token class-name">Adapter</span>    <span class="token keyword">extends</span>    <span class="token class-name">Adaptee</span>    <span class="token keyword">implements</span>    <span class="token class-name">Target</span>    <span class="token punctuation">{</span>    <span class="token keyword">public</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>注意：由于Java不支持多重类继承，因此类适配器的使用受到很多限制，例如如果目标抽象类Target不是接口，而是一个类，就无法使用类适配器；此外，如果适配者Adapter为最终 (Final)类，也无法使用类适配器。<strong>所以Target目标类必须是一个接口</strong></p><p>优点：</p><ul><li>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配 器的灵活性更强</li></ul><p>缺点：</p><ul><li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适 配多个适配者；</li><li>适配者类不能为最终类，如在Java中不能为final类，C#中不能为sealed类；</li><li>在Java、C#等语言中，类适配器模式中的<strong>目标抽象类只能为接口</strong>，不能为类，其使用有一 定的局限性。</li></ul><h4 id="双向适配器（前提：对象适配器）"><a href="#双向适配器（前提：对象适配器）" class="headerlink" title="双向适配器（前提：对象适配器）"></a>双向适配器（前提：对象适配器）</h4><p>​    <strong>对象适配器的使用过程中</strong>，如果在适配器中<strong>同时包含对目标类和适配者类的引用</strong>，适配者 可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法，那么该适配器就是一个双向适配器</p><p>关键代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span>    <span class="token class-name">Adapter</span>    <span class="token keyword">implements</span>    <span class="token class-name">Target</span><span class="token punctuation">,</span>Adaptee    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//同时维持对抽象目标类和适配者的引用</span>    <span class="token keyword">private</span>    Target    target<span class="token punctuation">;</span>        <span class="token keyword">private</span>    Adaptee    adaptee<span class="token punctuation">;</span>    <span class="token keyword">public</span>    <span class="token function">Adapter</span><span class="token punctuation">(</span>Target    target<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>target    <span class="token operator">=</span>    target<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token keyword">public</span>    <span class="token function">Adapter</span><span class="token punctuation">(</span>Adaptee    adaptee<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee    <span class="token operator">=</span>    adaptee<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>            <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>            target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><h4 id="缺省适配器（单口适配器接口）"><a href="#缺省适配器（单口适配器接口）" class="headerlink" title="缺省适配器（单口适配器接口）"></a>缺省适配器（单口适配器接口）</h4><p>缺省适配器模式：当<strong>不需要</strong>实现一个接口所提供的<strong>所有</strong>方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以<strong>选择性地覆盖</strong>父类的某些方法来实现需求，它<strong>适用于不想使用一个接口中的所有方法</strong>的情况</p><ul><li>ServiceInterface（适配者接口）：它是一个接口，通常在该接口中声明了大量的方法。</li><li>AbstractServiceClass（缺省适配器类）：它是缺省适配器模式的核心类，使用空方法的形式 实现了在ServiceInterface接口中声明的方法。通常将它定义为抽象类，因为对它进行实例化没 有任何意义。</li><li>ConcreteServiceClass（具体业务类）：它是缺省适配器类的子类，在没有引入适配器之前， 它需要实现适配者接口，因此需要实现在适配者接口中定义的所有方法，而对于一些无须使用的方法也不得不提供空实现。在<strong>有了缺省适配器之后，可以直接继承该适配器类，根据需 要有选择性地覆盖在适配器类中定义的方法</strong>。</li></ul><p>练习：Sunny软件公司OA系统需要提供一个加密模块，将用户机密信息（如口令、邮箱等）加密之后再存储在数据库中，系统已经定义好了数据库操作类。为了提高开发效率，现需要重用已有的加密算法，这些算法封装在一些由第三方提供的类中，有些甚至没有源代码。试使用适配器模式设计该加密模块，实现在不修改现有类的基础上重用第三方加密 方法</p><p>下列代码对象适配器：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适配者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptionAlgorithm</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encryptionAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用加密算法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//目标</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMessageEncryptionModel</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对邮箱的加密</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encryptionEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对密码加密</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encryptionPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptionAlgorithmAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">UserMessageEncryptionModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> EncryptionAlgorithm encryptionAlgorithm<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EncryptionAlgorithmAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        encryptionAlgorithm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EncryptionAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encryptionEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        encryptionAlgorithm<span class="token punctuation">.</span><span class="token function">encryptionAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对邮箱已加密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encryptionPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        encryptionAlgorithm<span class="token punctuation">.</span><span class="token function">encryptionAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对密码已加密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>public class Client {    public static void main(String[] args) {        UserMessageEncryptionModel umem;        umem = (UserMessageEncryptionModel)             XMLUtil.getAdapterType();        umem.encryptionEmail();        umem.encryptionPassword();    }}</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getAdapterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory documentBuilderFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder documentBuilder <span class="token operator">=</span> documentBuilderFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document document <span class="token operator">=</span> documentBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"lib/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"adapterType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String className <span class="token operator">=</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cName <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.designPattern.adapter."</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object object <span class="token operator">=</span> cName<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>adapterType</span><span class="token punctuation">></span></span>EncryptionAlgorithmAdapter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>adapterType</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//输出结果</span>调用加密算法对邮箱已加密调用加密算法对密码已加密</code></pre><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul><li><p>意图：</p><p>处理一个类中有两个或多个以上不同的独立变化的维度</p></li><li><p>解决什么问题，什么时候使用该设计模式</p><p>采用多层继承结构方法处理一个具有多个维度变化的类，导致系统的类个数极剧增加</p><p>处理一个具有多个维度变化的类添加新的某一维度的对象时将需要增加大量的具体类，扩展麻烦</p></li><li><p>怎样解决</p><p>​    将一个类中两个独立变化的维度分离，使它们可以独立扩展，增加某一个维度的对象都对另一个维度不造成任何影响，让系统更加符合单一职责原则。</p><p>​    与多层继承方案不同，它将两个独立变化的维度设计为<strong>两个独立的继承等级结构</strong>， 并且在抽象层<strong>建立一个抽象关联</strong>，该关联关系类似一条连接两个独立继承结构的桥，故名桥接模式。</p><p>​    桥接模式：：将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是 一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</p></li><li><p>结构图</p><p><strong>Abstraction（抽象类）</strong>：用于定义抽象类的接口，它<strong>一般是抽象类</strong>而不是接口，其中定义了 一个Implementor（实现类接口）类型的对象并可以维护该对象，它与Implementor之间具有<strong>关联关系</strong>，它既可以包含抽象业务方法，也可以包含具体业务方法。</p><p><strong>RefinedAbstraction（扩充抽象类）</strong>：扩充由Abstraction定义的接口，通常情况下它不再是抽象类而是具体类，它实现了在Abstraction中声明的抽象业务方法，在RefinedAbstraction中可以 调用在Implementor中定义的业务方法。</p><p><strong>Implementor（实现类接口）</strong>：定义实现类的接口，这个接口不一定要与Abstraction的接口完 全一致，事实上这两个接口可以完全不同，一般而言，Implementor接口仅提供基本操作，而 Abstraction定义的接口可能会做更多更复杂的操作。Implementor接口对这些基本操作进行了声 明，而具体实现交给其子类。通过关联关系，在Abstraction中不仅拥有自己的方法，还可以调 用到Implementor中定义的方法，使用关联关系来替代继承关系。</p><p><strong>ConcreteImplementor（具体实现类）</strong>：具体实现Implementor接口，在不同的 ConcreteImplementor中提供基本操作的不同实现，在程序运行时，ConcreteImplementor对象将 替换其父类对象，提供给抽象类具体的业务操作方法。</p></li><li><p>在桥接模式中的设计原则的思想：</p><p>“单一职责原则”、“开闭原则”、“合成复用原则”、“里氏代换原则”、“依赖倒转原则”等</p></li><li><p>使用该模式的注意点：</p><ol><li><p>需要识别出一个类所具有的两个或多个的独立变化的维度</p></li><li><p><strong>将维度设计为两个或多个独立的等级结构，为不同的维度都提供抽象层，建立抽象耦合</strong></p><p>通常情况下，我们将具有两个独立变化维度的类的一些普通业务方法和与之关系最密切的维度设计为“抽象 ”层次结构（抽象部分），而将另一个维度设计为“实现类”层次结构（实现部分）。</p><p>例如：对于毛笔而言，由于型号是其固有的维度，因此可以设计一个抽象的毛笔类，在该类中声明 并部分实现毛笔的业务方法，而将各种型号的毛笔作为其子类；颜色是毛笔的另一个维度， 由于它与毛笔之间存在一种“设置”的关系，因此我们可以提供一个抽象的颜色接口，而将具体的颜色作为实现该接口的子类。因此，型号可认为是毛笔的抽象部分，而颜色是毛笔的实现 部分</p></li></ol></li><li><p>关键代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对于“实现部分”维度  </span><span class="token keyword">interface</span>    <span class="token class-name">Implementor</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">operationImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//“抽象部分”维度</span><span class="token keyword">abstract</span>    <span class="token keyword">class</span>    <span class="token class-name">Abstraction</span>    <span class="token punctuation">{</span>    <span class="token keyword">protected</span>    Implementor    impl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义实现类接口对象        </span>    <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">setImpl</span><span class="token punctuation">(</span>Implementor    impl<span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>impl<span class="token operator">=</span>impl<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                <span class="token keyword">public</span>    <span class="token keyword">abstract</span>    <span class="token keyword">void</span>    <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明抽象业务方法        </span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义了一个实现类接口类型的成员对象impl，再通过注入的方式给该对象赋值，一般将该对象的可见性定义为protected，以便在其子类中访问Implementor的方法，其子类一般称为扩充抽象类或细化抽象类(RefinedAbstraction)</span><span class="token keyword">class</span> <span class="token class-name">RefinedAbstraction</span>    <span class="token keyword">extends</span>    <span class="token class-name">Abstraction</span>    <span class="token punctuation">{</span>    <span class="token keyword">public</span>    <span class="token keyword">void</span>    <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//业务代码                        </span>            impl<span class="token punctuation">.</span><span class="token function">operationImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用实现类的方法    </span>    <span class="token comment" spellcheck="true">//业务代码                    </span>     <span class="token punctuation">}</span>         <span class="token punctuation">}</span></code></pre></li><li><p>适配器模式与桥接模式的联用</p><p>桥接模式和适配器模式用于设计的不同阶段，桥接模式用于系统的初步设计，对于存在两个 独立变化维度的类可以将其分为抽象化和实现化两个角色，使它们可以分别进行变化；而在 初步设计完成之后，当发现系统与已有类无法协同工作时，可以采用适配器模式。但有时候 在设计初期也需要考虑适配器模式，特别是那些涉及到大量第三方应用接口的情况。</p></li><li><p>优点</p><ol><li><strong>分离抽象接口及其实现部分</strong>。桥接模式使用“对象间的关联关系”解耦了抽象和实现之间固 有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自维度 的变化，也就是说抽象和实现不再在同一个继承层次结构中，而是“子类化”它们，使它们各自 都具有自己的子类，以便任何组合子类，从而获得多维度组合对象。</li><li>在很多情况下，<strong>桥接模式可以取代多层继承方案</strong>，多层继承方案违背了“单一职责原则”， 复用性较差，且类的个数非常多，桥接模式是比多层继承方案更好的解决方法，它极大减少 了子类的个数。</li><li>桥接模式提高了系统的可扩展性，在两个变化维度中任意扩展一个维度，都不需要修改原 有系统，符合“开闭原则”。</li></ol></li><li><p>缺点</p><ol><li>桥接模式的使用会增加系统的理解与设计难度，由于关联关系建立在抽象层，<strong>要求开发者 一开始就针对抽象层进行设计与编程。</strong></li><li>桥接模式<strong>要求正确识别出系统中两个独立变化的维度</strong>，因此其使用范围具有一定的局限 性，如何正确识别两个独立维度也需要一定的经验积累。</li></ol></li><li><p>注意事项</p><ol><li>如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静 态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li><li>“抽象部分”和“实现部分”可以以继承的方式独立扩展而互不影响，在程序运行时可以动态 将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实 现化角色进行动态耦合。</li><li>一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立进行扩 展。</li><li>对于那些不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ol></li></ul><p>   练习：Sunny软件公司欲开发一个数据转换工具，可以将数据库中的数据转换成多种文件格式， 例如txt、xml、pdf等格式，同时该工具需要支持多种不同的数据库。试使用桥接模式对其进行设计。</p><p>​        分析：将文件格式作为转换工具的抽象部分，将数据库作为实体部分</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FileType</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> DataBaseImp dbImp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDbImp</span><span class="token punctuation">(</span>DataBaseImp dbImp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dbImp <span class="token operator">=</span> dbImp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dataConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TxtFile</span> <span class="token keyword">extends</span> <span class="token class-name">FileType</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        dbImp<span class="token punctuation">.</span><span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将数据转换成txt文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLFile</span> <span class="token keyword">extends</span> <span class="token class-name">FileType</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        dbImp<span class="token punctuation">.</span><span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将数据转换成xml文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PdfFile</span> <span class="token keyword">extends</span> <span class="token class-name">FileType</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        dbImp<span class="token punctuation">.</span><span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将数据转换成pdf文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DataBaseImp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQL</span> <span class="token keyword">implements</span> <span class="token class-name">DataBaseImp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接SQL数据库！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqLite</span> <span class="token keyword">implements</span> <span class="token class-name">DataBaseImp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接Sqlite数据库！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySql</span> <span class="token keyword">implements</span> <span class="token class-name">DataBaseImp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectionDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接Mysql数据库！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        FileType file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataBaseImp dataBaseImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqLite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">setDbImp</span><span class="token punctuation">(</span>dataBaseImp<span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">dataConversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span>连接Sqlite数据库！将数据转换成xml文件</code></pre><p>练习：将毛笔与颜色的案例用桥接模式编码实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Brush</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Color color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>Color color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MaxBrush</span> <span class="token keyword">extends</span> <span class="token class-name">Brush</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        color<span class="token punctuation">.</span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选用大号毛笔作画！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StandardBrush</span> <span class="token keyword">extends</span> <span class="token class-name">Brush</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        color<span class="token punctuation">.</span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选用标准号毛笔作画！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinBrush</span> <span class="token keyword">extends</span> <span class="token class-name">Brush</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        color<span class="token punctuation">.</span><span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选用小号毛笔作画！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlueColor</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"颜料为蓝色！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YellowColor</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"颜料为黄色！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedColor</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"颜料为红色！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory dFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder dBuilder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document document <span class="token operator">=</span> dBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src//paintBrush//config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nList <span class="token operator">=</span> null<span class="token punctuation">;</span>            Node cNode <span class="token operator">=</span> null<span class="token punctuation">;</span>            String cName <span class="token operator">=</span> null<span class="token punctuation">;</span>            nList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"brush"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cNode <span class="token operator">=</span> nList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cNode <span class="token operator">=</span> nList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cName <span class="token operator">=</span> cNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class <span class="token class-name">class1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object object <span class="token operator">=</span> class1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: handle exception</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">></span></span>paintBrush.StandardBrush<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">></span></span>paintBrush.RedColor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        Brush brush <span class="token operator">=</span> <span class="token punctuation">(</span>Brush<span class="token punctuation">)</span> XMLUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"brush"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Color color <span class="token operator">=</span> <span class="token punctuation">(</span>Color<span class="token punctuation">)</span> XMLUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brush<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        brush<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果</span>颜料为红色！选用标准号毛笔作画！</code></pre><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaptcha框架验证码实现</title>
      <link href="/posts/3710971821/"/>
      <url>/posts/3710971821/</url>
      
        <content type="html"><![CDATA[<h1 id="Kaptcha框架验证码实现"><a href="#Kaptcha框架验证码实现" class="headerlink" title="Kaptcha框架验证码实现"></a>Kaptcha框架验证码实现</h1><p>​    <strong>工作原理：</strong>调用 <code>com.google.code.kaptcha.servlet.KaptchaServlet</code>,生成一张图片，同时将生成的验证码字符放在 <strong>HttpSession</strong>中，直接从session中获取这张验证码图片，从而不会占用实际内存。</p><p><strong>使用Kaptcha可以方便的配置以下细节：</strong></p><ul><li>验证码的字体的<strong>颜色，大小</strong></li><li>验证码<strong>内容的范围</strong></li><li>验证码<strong>图片的大小，边框，边框粗细，边框颜色</strong></li><li>验证码的<strong>干扰线</strong></li><li>验证码的<strong>样式</strong></li></ul><p>​    <strong>具体属性配置项：</strong></p><table><thead><tr><th>配置项</th><th align="left">描述</th><th>默认值</th><th>可选值</th></tr></thead><tbody><tr><td>kaptcha.border</td><td align="left">是否有边框</td><td>默认为yes</td><td>yes,no</td></tr><tr><td>kaptcha.border.color</td><td align="left">边框颜色</td><td>默认为Color.BLACK</td><td></td></tr><tr><td>kaptcha.border.thickness</td><td align="left">边框粗细度</td><td>默认为1</td><td></td></tr><tr><td>kaptcha.producer.impl</td><td align="left">验证码生成器</td><td>默认为DefaultKaptcha</td><td></td></tr><tr><td>kaptcha.textproducer.impl</td><td align="left">验证码文本生成器</td><td>默认为DefaultTextCreator</td><td></td></tr><tr><td>kaptcha.textproducer.char.string</td><td align="left">验证码文本字符内容范围</td><td></td><td></td></tr><tr><td>kaptcha.textproducer.char.length</td><td align="left">验证码文本字符长度</td><td>默认为5</td><td></td></tr><tr><td>kaptcha.textproducer.font.names</td><td align="left">验证码文本字体样式</td><td></td><td></td></tr><tr><td>kaptcha.textproducer.font.size</td><td align="left">验证码文本字符大小</td><td>默认为40</td><td></td></tr><tr><td>kaptcha.textproducer.font.color</td><td align="left">验证码文本字符颜色</td><td>默认为Color.BLACK</td><td></td></tr><tr><td>kaptcha.textproducer.char.space</td><td align="left">验证码文本字符间距</td><td>默认为2</td><td></td></tr><tr><td>kaptcha.noise.impl</td><td align="left">验证码噪点生成对象</td><td>默认为DefaultNoise</td><td></td></tr><tr><td>kaptcha.noise.color</td><td align="left">验证码噪点颜色</td><td>默认为Color.BLACK</td><td></td></tr><tr><td>kaptcha.obscurificator.impl</td><td align="left">验证码样式引擎</td><td>默认为WaterRipple</td><td></td></tr><tr><td>kaptcha.word.impl</td><td align="left">验证码文本字符渲染</td><td>默认为DefaultWordRenderer</td><td></td></tr><tr><td>kaptcha.background.impl</td><td align="left">验证码背景生成器</td><td>默认为DefaultBackground</td><td></td></tr><tr><td>kaptcha.background.clear.from</td><td align="left">验证码背景颜色渐进</td><td>默认为Color.LIGHT_GRAY</td><td></td></tr><tr><td>kaptcha.background.clear.to</td><td align="left">验证码背景颜色渐进</td><td>默认为Color.WHITE</td><td></td></tr><tr><td>kaptcha.image.width</td><td align="left">验证码图片宽度</td><td>默认为200</td><td></td></tr><tr><td>kaptcha.image.height</td><td align="left">验证码图片高度</td><td>默认为50</td><td></td></tr></tbody></table><p>图片样式：kaptcha.obscurificator.impl<br>水纹 com.google.code.kaptcha.impl.WaterRipple<br>鱼眼 com.google.code.kaptcha.impl.FishEyeGimpy<br>阴影 com.google.code.kaptcha.impl.ShadowGimpy</p><p><strong>实现</strong></p><ul><li><p>下载驱动jar包</p><ul><li><p>将jar包放入WEB-INF/lib目录下</p></li><li><p>web.xml中配置Servlet：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-</span>   <span class="token attr-name">class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>Kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre></li><li><p>在web.xml中配置验证码Servlet（设置具体属性值）</p><p> 在<Servlet>标签中添加<init-param>标签，例如将验证码的边框设置为no:</init-param></Servlet></p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>kaptcha.border<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parm-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>no<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span></code></pre><ul><li>编写验证类</li></ul><pre class=" language-java"><code class="language-java">String compareCode<span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>code<span class="token punctuation">.</span>kaptcha<span class="token punctuation">.</span>Constants<span class="token punctuation">.</span>KAPTCHA_SESSION_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String inCode <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"inCode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//inCode为用户输入的验证码</span><span class="token keyword">if</span><span class="token punctuation">(</span>inCode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>compareCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">,</span> <span class="token string">"验证码输入错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>以上的Kaptcha框架实现是在web.xml中配置实现</p><ul><li><p>代码实现Kaptcha框架（下部分代码替代web.xml的配置）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//设置属性集</span>Properties pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pros<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kaptcha.border"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span>pros<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建kaptcha对象</span>DefaultKaptcha kaptcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>kaptcha<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成验证码并保存到Session</span>String code <span class="token operator">=</span> kaptcha<span class="token punctuation">.</span><span class="token function">createText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>KAPTCHA_SESSION_KEY<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生成图片</span>BufferedImage img <span class="token operator">=</span> kaptcha<span class="token punctuation">.</span><span class="token function">createImage</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回图片</span>ServletOutputStream sos <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> sos<span class="token punctuation">)</span><span class="token punctuation">;</span>sos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机字符串验证码实现</title>
      <link href="/posts/2971013733/"/>
      <url>/posts/2971013733/</url>
      
        <content type="html"><![CDATA[<h1 id="Java实现随机字符串验证码"><a href="#Java实现随机字符串验证码" class="headerlink" title="Java实现随机字符串验证码"></a>Java实现随机字符串验证码</h1><p>  随机生成由大写字母或小写字母或数字或汉字组成的字符串</p><h2 id="随机验证码的优缺点"><a href="#随机验证码的优缺点" class="headerlink" title="随机验证码的优缺点"></a>随机验证码的优缺点</h2><ul><li><strong>优点:</strong> 生成方便，识别难易度可调节</li><li><strong>缺点:</strong> 识别度不好把握</li></ul><h2 id="随机字符串验证码的实现方式"><a href="#随机字符串验证码的实现方式" class="headerlink" title="随机字符串验证码的实现方式"></a>随机字符串验证码的实现方式</h2><ul><li><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a><strong>Java实现</strong></h3><ul><li><p><strong>过程</strong></p><ol><li>用户每次访问页面时随机生成一张图片，图片内容通常是数字，汉字或字母的随机组合</li><li>访问者识别图片的内容并填写表单提交</li><li>服务器端将接收到的访问者提交的验证码与Session范围内保存的验证码进行比较，进行合法性判断</li></ol></li><li><p><strong>原理</strong></p><ol><li>创建画板：new BufferedImage()</li><li>创建画笔：画板.getGraphics()</li><li>随机生成内容：不同颜色的字符</li><li>绘制内容：画笔drawString()</li><li>存为图片发送：ImageIO.wirte(画板，图片类型，输出流)</li></ol></li><li><p><strong>代码实现</strong><br>创建randomCode.class</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">randomCode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 随机数对象</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图片宽度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图片高度</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> fontsize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字体大小</span>    <span class="token keyword">private</span> String str <span class="token operator">=</span> <span class="token string">"0123456789qwertyuioplkjhgfdsazxcvbnm"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 字符集</span>    <span class="token keyword">private</span> String compareStr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 验证比较字符</span>    <span class="token keyword">public</span> String <span class="token function">getCompareStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> compareStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompareStr</span><span class="token punctuation">(</span>String compareStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>compareStr <span class="token operator">=</span> compareStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFontsize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fontsize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFontsize</span><span class="token punctuation">(</span><span class="token keyword">int</span> fontsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fontsize <span class="token operator">=</span> fontsize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 生成最短长度为4的字符串</span>    <span class="token keyword">private</span> String <span class="token function">randCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            len <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        width <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> fontsize <span class="token operator">*</span> len<span class="token punctuation">;</span>        String code <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            code <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回随机颜色</span>    <span class="token keyword">private</span> Color <span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> g <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 画板元素具体值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createImgElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> fontsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setWidth</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFontsize</span><span class="token punctuation">(</span>fontsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> BufferedImage <span class="token function">randomCodeImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、创建画板</span>        BufferedImage img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、创建画笔</span>        Graphics2D pen <span class="token operator">=</span> <span class="token punctuation">(</span>Graphics2D<span class="token punctuation">)</span> img<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、生成随机内容</span>        String codeStr <span class="token operator">=</span> <span class="token function">randCode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将生成内容赋值给比较验证字符</span>        <span class="token function">setCompareStr</span><span class="token punctuation">(</span>codeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、绘制内容</span>        <span class="token comment" spellcheck="true">// 4.1设置绘制区域</span>        pen<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.2设置字体</span>        pen<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> fontsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.3按顺序逐个绘制字符</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> codeStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pen<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>codeStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">+</span> i <span class="token operator">*</span> fontsize<span class="token punctuation">,</span> <span class="token punctuation">(</span>fontsize <span class="token operator">+</span> height<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.4绘制噪音线</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pen<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token function">randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pen<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicStroke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pen<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span>                    random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 5返回图片</span>        <span class="token keyword">return</span> img<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li><li><p><strong>实现randomCode类</strong></p><p>实现方式: Servlet 与 JSP</p><pre class=" language-java"><code class="language-java">ServletOutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用randomCode对象的createImgElement方法声明image的长、宽、采用的字体大小</span>randomCode randomCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">randomCodeT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>randomCode<span class="token punctuation">.</span><span class="token function">createImgElement</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>BufferedImage image <span class="token operator">=</span> randomCode<span class="token punctuation">.</span><span class="token function">randomCodeImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取随机生成的字符串的值保存在Session["randomCode"]</span>request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"randomCode"</span><span class="token punctuation">,</span>randomCode<span class="token punctuation">.</span><span class="token function">getCompareStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><h3 id="JQuery实现"><a href="#JQuery实现" class="headerlink" title="JQuery实现"></a><strong>JQuery实现</strong></h3><p> JQuery实现验证码的目的：<strong>减轻服务器压力</strong><br>  <strong>缺点</strong>:  纯JQuery验证码容易破解<br> <strong>实现关键</strong>: Cavan标签</p><ul><li><p>代码实现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//randomcode.js  </span><span class="token comment" spellcheck="true">/*使用方式：html或jsp页面中使用canvas标签，利用js获取canvas标签ID为 var canvas，调用  drawcode（canvas）方法；实现例子： &lt;script type="text/javascript">  var code; //接受返回的随机字符串值  function changeCode(){    var cvs = document.getElementById("cvs");    code = drawcode(cvs);  } &lt;/script>*/</span><span class="token comment" spellcheck="true">//高度、宽度、字符大小、字符集</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token keyword">var</span> fontsize <span class="token operator">=</span> h<span class="token number">-6</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"0123456789abcdefABCDEF"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机生成最大值不超过max的整数</span><span class="token keyword">function</span> <span class="token function">randInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100000</span><span class="token operator">%</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生成随机长度的字符串验证码</span><span class="token keyword">function</span> <span class="token function">randCode</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      len <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      code <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token function">randInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生成随机颜色</span><span class="token keyword">function</span> <span class="token function">randColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"rgb("</span><span class="token operator">+</span>r<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>g<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//绘制图片 return code  code为传递变量，在jsp或html页面中调用，用来与用户输入的验证码制作比较</span><span class="token keyword">function</span> <span class="token function">drawcode</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> code <span class="token operator">=</span> <span class="token function">randCode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  w <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> fontsize<span class="token operator">*</span>code<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>canvas <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> canvas<span class="token punctuation">.</span>getContext <span class="token operator">&amp;&amp;</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//设置显示区域大小</span>      canvas<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> w<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置画板高宽</span>      canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"width"</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>      canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//得到画笔</span>      <span class="token keyword">var</span> pen <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//绘制背景</span>      pen<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"rgb(255,255,255)"</span><span class="token punctuation">;</span>      pen<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//设置水平线位置</span>      pen<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">"top"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//middle,bottom</span>      <span class="token comment" spellcheck="true">//绘制内容</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>code<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          pen<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token function">randColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          pen<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"bold "</span><span class="token operator">+</span><span class="token punctuation">(</span>fontsize<span class="token operator">+</span><span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"px 微软雅黑"</span><span class="token punctuation">;</span>          pen<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">+</span>fontsize<span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//绘制噪音线</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          pen<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token function">randInt</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token function">randInt</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置起点</span>          pen<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token function">randInt</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">randInt</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置终点</span>          pen<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token function">randColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          pen<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线条粗细</span>          pen<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> code<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 验证码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
